{
    "docs": [
        {
            "location": "/", 
            "text": "Coronium SkyTable\n\n\nA performant user scoped data table store and client for use with \nCorona\n.\n\n\n\n\nGet The Client\n\n\nFirst point your browser to the \nCoronium SkyTable Client GitHub repo\n.\n\n\nNext, click the \"Clone or Download\" button and select \"Download ZIP\" to a location on your computer.\n\n\n\n\nExpand the \ncoronium-skytable-master.zip\n file and navigate to \ncoronium-skytable-master/skytable\n directory.\n\n\n\n\nCopy the \nskytable\n directory to the root of your Corona SDK project.\n\n\n\n\nAdding The Client\n\n\nOnce you have the \nskytable\n directory in your project, do the following to incorporate it.\n\n\nOpen your \nmain.lua\n file and add the following:\n\n\nlocal skytable = require('skytable.client')\n\n\n\n\n\n\nTip\n\n\nSee \nClient API\n to start using the API.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#coronium-skytable", 
            "text": "A performant user scoped data table store and client for use with  Corona .", 
            "title": "Coronium SkyTable"
        }, 
        {
            "location": "/#get-the-client", 
            "text": "First point your browser to the  Coronium SkyTable Client GitHub repo .  Next, click the \"Clone or Download\" button and select \"Download ZIP\" to a location on your computer.   Expand the  coronium-skytable-master.zip  file and navigate to  coronium-skytable-master/skytable  directory.   Copy the  skytable  directory to the root of your Corona SDK project.", 
            "title": "Get The Client"
        }, 
        {
            "location": "/#adding-the-client", 
            "text": "Once you have the  skytable  directory in your project, do the following to incorporate it.  Open your  main.lua  file and add the following:  local skytable = require('skytable.client')   Tip  See  Client API  to start using the API.", 
            "title": "Adding The Client"
        }, 
        {
            "location": "/api/", 
            "text": "SkyTable\n\n\ninit\n\n\nInitialize the SkyTable module.\n\n\n:init(config)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nconfig\n\n\nThe SkyTable configuration.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nConfig Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser\n\n\nThe SkyTable user.\n\n\nString\n\n\nY\n\n\n\n\n\n\npassword\n\n\nThe user password.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbase\n\n\nThe SkyTable base.\n\n\nString\n\n\nY\n\n\n\n\n\n\nhost\n\n\nThe SkyTable server host.\n\n\nString\n\n\nY\n\n\n\n\n\n\nkey\n\n\nThe SkyTable server key\n\n\nString\n\n\nY\n\n\n\n\n\n\ndebug\n\n\nOutput response data.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nskytable:init({\n  user = \nuser-email\n,\n  password = \nuser-password\n,\n  base = \napp1\n,\n  host = \nhttp://skytable-host\n,\n  key = \nserver-key\n,\n  debug = true\n})\n\n\n\n\n\n\nopen\n\n\nOpen a SkyTable for usage.\n\n\n:open(table_name)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntable_name\n\n\nThe name of the SkyTable to use.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal profile = skytable:open(\nprofile\n)\n\n\n\n\n\n\nset\n\n\nSet a value in a SkyTable.\n\n\n:set([data_path,] data, listener[, options])\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\ndata\n\n\nThe data to set the item to.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nflag\n\n\nNX\n or \nXX\n. (See \nFlags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nexpiry\n\n\nTable expiration in seconds. (See \nExpiry\n)\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile:set(\nage\n, 23, onSetResult)\n\n\n\n\n\n\nTip\n\n\nSee \nSet\n in the \nClient Guide\n for detailed usage information.\n\n\n\n\n\n\nget\n\n\nGet a value from a SkyTable.\n\n\n:get([data_path,] listener[, options])\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile:get(\nage\n, onResult)\n\n\n\n\n\n\nTip\n\n\nSee \nGet\n in the \nClient Guide\n for detailed usage information.\n\n\n\n\n\n\ndelete\n\n\nDelete a value in a SkyTable.\n\n\n:delete([data_path,] listener[, options])\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile:delete(\ncolor\n, onResult)\n\n\n\n\n\n\nTip\n\n\nSee \nDelete\n in the \nClient Guide\n for detailed usage information.\n\n\n\n\n\n\nkeys\n\n\nReturns the SkyTable keys.\n\n\n:keys([data_path,] listener[, options])\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile:keys(onResult)", 
            "title": "Client API"
        }, 
        {
            "location": "/api/#skytable", 
            "text": "", 
            "title": "SkyTable"
        }, 
        {
            "location": "/api/#init", 
            "text": "Initialize the SkyTable module.  :init(config)  Parameters     Name  Description  Type  Required      config  The SkyTable configuration.  Table  Y     Config Properties     Name  Description  Type  Required      user  The SkyTable user.  String  Y    password  The user password.  String  Y    base  The SkyTable base.  String  Y    host  The SkyTable server host.  String  Y    key  The SkyTable server key  String  Y    debug  Output response data.  Boolean  N     Example  skytable:init({\n  user =  user-email ,\n  password =  user-password ,\n  base =  app1 ,\n  host =  http://skytable-host ,\n  key =  server-key ,\n  debug = true\n})", 
            "title": "init"
        }, 
        {
            "location": "/api/#open", 
            "text": "Open a SkyTable for usage.  :open(table_name)  Parameters     Name  Description  Type  Required      table_name  The name of the SkyTable to use.  String  Y     Example  local profile = skytable:open( profile )", 
            "title": "open"
        }, 
        {
            "location": "/api/#set", 
            "text": "Set a value in a SkyTable.  :set([data_path,] data, listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    data  The data to set the item to.  String  Y    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N    flag  NX  or  XX . (See  Flags )  String  N    expiry  Table expiration in seconds. (See  Expiry )  Number  N     Example  profile:set( age , 23, onSetResult)   Tip  See  Set  in the  Client Guide  for detailed usage information.", 
            "title": "set"
        }, 
        {
            "location": "/api/#get", 
            "text": "Get a value from a SkyTable.  :get([data_path,] listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N     Example  profile:get( age , onResult)   Tip  See  Get  in the  Client Guide  for detailed usage information.", 
            "title": "get"
        }, 
        {
            "location": "/api/#delete", 
            "text": "Delete a value in a SkyTable.  :delete([data_path,] listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N     Example  profile:delete( color , onResult)   Tip  See  Delete  in the  Client Guide  for detailed usage information.", 
            "title": "delete"
        }, 
        {
            "location": "/api/#keys", 
            "text": "Returns the SkyTable keys.  :keys([data_path,] listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N     Example  profile:keys(onResult)", 
            "title": "keys"
        }, 
        {
            "location": "/guide/", 
            "text": "Overview\n\n\n\n\nData Paths\n\n\nData paths allow you to \"path\" to a value in the SkyTable, both to set and get the underlying value. Data paths can be used in all of the value based API calls. This includes \nget\n, \nset\n, \ndelete\n, and \nkeys\n.\n\n\nWhen calling any of the value methods \nwithout\n a data path, a \"root\" path is implied. For example, let's assume the following data exists in a \"profile\" SkyTable:\n\n\n{\n  name = \nJim\n,\n  age = 34,\n  active = true,\n  address = {\n    street = \n123 Main St.\n,\n    city = \nSan Diego\n,\n    state = \nCA\n,\n    zip = \n92037\n\n  },\n  colors = {\nred\n, \ngreen\n, \nblue\n}\n}\n\n\n\n\nPathing with Get\n\n\nThen following call brings back the entire SkyTable (its \"root\" path):\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onResult(evt)\n  local data = evt.data --the entire data table\n  print(data.name) -- Jim\nend\n\nprofile:get(onResult)\n\n\n\n\nTo gain access to an individual value in the SkyTable, we can supply a path:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onResult(evt)\n  local data = evt.data --holds \nname\n value\n  print(data) -- Jim\nend\n\nprofile:get(\nname\n, onResult)\n\n\n\n\nTo dive even deeper into the SkyTable, just path to the key, using a \"dot\" separator:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onResult(evt)\n  local data = evt.data --holds \ncity\n value\n  print(data) -- San Diego\nend\n\nprofile:get(\naddress.city\n, onResult)\n\n\n\n\nIf we wanted the entire \"address\" table:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onResult(evt)\n  local data = evt.data --entire address table\n  print(address.state) -- CA\nend\n\nprofile:get(\naddress\n, onResult)\n\n\n\n\nOr the \"colors\" table array:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onResult(evt)\n  local data = evt.data --entire colors array\n  for i=1, #data.colors  do\n    print(data.colors[i]) --red, green, blue\n  end\nend\n\nprofile:get(\ncolors\n, onResult)\n\n\n\n\nYou can path as far as you need:\n\n\ngear:get(\nset1.arms.def\n, onResult)\n\n\n\n\nPathing with Set\n\n\nWhen using paths with the \nset\n API call, the usage outlined above stays the same, with some implementation differences when setting a \"root\" path.\n\n\nWhen first populating a SkyTable, you \nmust\n pass it a data table to start with. This can be as little as one property, or a whole predefined table. To create the inital SkyTable we do like so:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\nlocal data_tbl = \n{\n  name = \nJim\n\n}\n\nprofile:set(data_tbl, onSetResult)\n\n\n\n\nOnce we have a data table saved to a SkyTable, we can set values on it at a later time by using a path:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\nprofile:set(\nname\n, \nSally\n, onSetResult)\n\n\n\n\nTo add an \"address\" data table to our SkyTable, we can do:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal address = {\n  street = \n123 Main St.\n,\n  city = \nSan Diego\n,\n  state = \nCA\n,\n  zip = \n92037\n\n}\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\nprofile:set(\naddress\n, address, onSetResult)\n\n\n\n\nAnd to change a value in the \"address\" data table:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\nprofile:set(\naddress.city\n, \nSan Francisco\n, onSetResult)\n\n\n\n\nOr adding an array table:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\nprofile:set(\ncolors\n, {\nred\n,\ngreen\n,\nblue\n}, onSetResult)\n\n\n\n\n\n\nImportant\n\n\nOnce the \"root\" data table has been set for a SkyTable, you cannot overwrite it without specifying a flag.\n\n\n\n\nTo \noverwrite\n a \"root\" data table in a SkyTable, you must pass a special flag. This is not required when creating the initial data.\n\n\nprofile:set(newDataTable, onSetResult, {flag=\nXX\n})\n\n\n\n\nThis helps prevent overwriting your \"root\" data table by accident. Flags can also be used with data paths, but the pathed value will be overwritten on any \nset\n call.\n\n\nSee \nFlags\n for more details.\n\n\n\n\nListeners\n\n\nBecause network requests are not synchronus actions, listeners must be supplied to all SkyTable API calls. The listener is where you will recieve the response from the SkyTable server.\n\n\nThere are two different event types returned from a SkyTable server. One shaped for the \nset\n call, and another for the remaining value based API calls; \nget\n, \ndelete\n, and \nkeys\n.\n\n\nWhile you can use one listener for all the API calls, in general its easier to create two different listeners:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\n--Set\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.success)\n  end\nend\n\n--Get, Delete, Keys\nlocal function onResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    local data = evt.data --String, Number, Boolean, Table, or nil\n  end\nend\n\n\n\n\nThe main difference between the events are the properties available.\n\n\nSet event properties:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nisError\n\n\nAn error has occured.\n\n\nBoolean\n\n\n\n\n\n\nerror\n\n\nA descriptive error string.\n\n\nString\n\n\n\n\n\n\nsuccess\n\n\nA flag noting a successful \nset\n action.\n\n\nBoolean\n\n\n\n\n\n\nkey\n\n\nThe user key of the calling client.\n\n\nString\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf set, the \nsuccess\n flag will almost always be \ntrue\n. An unsuccessful call will usually be propagated to the \nerror\n property.\n\n\n\n\nGet, Delete, Keys event properties:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nisError\n\n\nAn error has occurred.\n\n\nBoolean\n\n\n\n\n\n\nerror\n\n\nA descriptive error string.\n\n\nString\n\n\n\n\n\n\ndata\n\n\nThe returned data.\n\n\nString, Number, Boolean, or Table\n\n\n\n\n\n\nkey\n\n\nThe user key of the calling client.\n\n\nString\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe \ndata\n property can potentially be \nnil\n.\n\n\n\n\nBest practices\n\n\nWhile you can set up general listeners, it's best to assign a specific listener per action:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal onSetName(evt)\n  if evt.success then\n    print('name saved')\n  end\nend\n\nlocal onSetColors(evt)\n  if evt.success then\n    print('colors saved')\n  end\nend\n\nprofile:set(\nname\n, \nDave\n, onSetName)\nprofile:set(\ncolors\n, {\nred\n,\ngreen\n,\nblue\n}, onSetColors)\n\n\n\n\nThis is the recommended approach for the other value based API calls; \nget\n, \ndelete\n, and \nkeys\n.\n\n\nAnother option is using \nTags\n.\n\n\n\n\nTags\n\n\nWhen using a general listener (see \nListeners\n), you can mark an API call with a \ntag\n to filter the response.\n\n\nA \ntag\n is added to a call using the \noptions\n parameter, which takes a table:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onResult(evt)\n  if not evt.isError then\n    print(evt.error)\n  else\n    local data = evt.data\n    if evt.tag == \nget-name\n then\n      print(data) -- name string\n    elseif evt.tag == \nget-colors\n then\n      print(data[1]) -- colors table array\n    end\n  end\nend\n\nprofile:get(\nname\n, onResult, {tag=\nget-name\n})\nprofile:get(\ncolors\n, onResult, {tag=\nget-colors\n})\n\n\n\n\nYou can also use this method to create one main generalized response listener for both the \nset\n call, as well as \nget\n, \ndelete\n, and \nkeys\n:\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onResult(evt)\n  if not evt.isError then\n    print(evt.error)\n  else\n    if evt.tag == \nset-name\n then\n      if evt.success then\n        print('name saved')\n      end\n    elseif evt.tag == \nget-colors\n then\n      print(evt.data[1]) -- colors table array\n    end\n  end\nend\n\nprofile:set(\nname\n, \nSam\n, onResult, {tag=\nset-name\n})\nprofile:get(\ncolors\n, onResult, {tag=\nget-colors\n})\n\n\n\n\n\n\nFlags\n\n\nWhen using the \nset\n API call, you can supply a \nflag\n to the \noptions\n parameter, as a table. \n\n\nFlag Types\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nNX\n\n\nSet the path value only if the path \ndoes not\n exist.\n\n\nString\n\n\n\n\n\n\nXX\n\n\nSet the path value only if the path \ndoes\n exist.\n\n\nString\n\n\n\n\n\n\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\n--set the name only if the path exists.\nprofile:set(\nname\n, onSetResult, {flag=\nXX\n})\n\n\n\n\n\n\nNote\n\n\nWhen calling a \nset\n without a flag, the value will be created if the path does not already exists, or replaced if it does.\n\n\n\n\n\n\nExpiry\n\n\nWhen using the \nset\n API call, you can also supply an \nexpiry\n to \"expire\" the SkyTable at a specified time. \n\n\n\n\nWarning\n\n\nOnce a SkyTable has been removed via an expiry, it is no longer accessible.\n\n\n\n\nExpiry Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nThe seconds until the SkyTable will be removed.\n\n\nNumber\n\n\n\n\n\n\n\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal onSetResult(evt)\n  if evt.success then\n    print('saved', 'expiry:', tostring(evt.expiry))\n  end\nend\n\n--remove the SkyTable in 5 minutes\nprofile:set(data_tbl, onSetResult, {expiry=300})\n\n\n\n\n\n\nNote\n\n\nWhen a path is updated using the \nset\n API call, the expiry will be reset to its initial value. For example, if you set a value after 2 minutes on a 5 minute exipry, the expiry will be reset to 5 minutes.\n\n\n\n\n\n\nTip\n\n\nTo automatically clean out inactive SkyTables, set a high expiry value.\n\n\n\n\n\n\nDelete\n\n\nThe \ndelete\n API call will remove a value at the given path.\n\n\n\n\nWarning\n\n\nThis method should be used with caution. When operating on the \"root\" path, the entire data table will be cleared, and the path will no longer exist. Unlike the \nset\n method flag protection, a \ndelete\n method will do its job as long as the path exists.\n\n\n\n\n\n\nKeys", 
            "title": "Client Guide"
        }, 
        {
            "location": "/guide/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/guide/#data-paths", 
            "text": "Data paths allow you to \"path\" to a value in the SkyTable, both to set and get the underlying value. Data paths can be used in all of the value based API calls. This includes  get ,  set ,  delete , and  keys .  When calling any of the value methods  without  a data path, a \"root\" path is implied. For example, let's assume the following data exists in a \"profile\" SkyTable:  {\n  name =  Jim ,\n  age = 34,\n  active = true,\n  address = {\n    street =  123 Main St. ,\n    city =  San Diego ,\n    state =  CA ,\n    zip =  92037 \n  },\n  colors = { red ,  green ,  blue }\n}  Pathing with Get  Then following call brings back the entire SkyTable (its \"root\" path):  local profile = skytable:open( profile )\n\nlocal function onResult(evt)\n  local data = evt.data --the entire data table\n  print(data.name) -- Jim\nend\n\nprofile:get(onResult)  To gain access to an individual value in the SkyTable, we can supply a path:  local profile = skytable:open( profile )\n\nlocal function onResult(evt)\n  local data = evt.data --holds  name  value\n  print(data) -- Jim\nend\n\nprofile:get( name , onResult)  To dive even deeper into the SkyTable, just path to the key, using a \"dot\" separator:  local profile = skytable:open( profile )\n\nlocal function onResult(evt)\n  local data = evt.data --holds  city  value\n  print(data) -- San Diego\nend\n\nprofile:get( address.city , onResult)  If we wanted the entire \"address\" table:  local profile = skytable:open( profile )\n\nlocal function onResult(evt)\n  local data = evt.data --entire address table\n  print(address.state) -- CA\nend\n\nprofile:get( address , onResult)  Or the \"colors\" table array:  local profile = skytable:open( profile )\n\nlocal function onResult(evt)\n  local data = evt.data --entire colors array\n  for i=1, #data.colors  do\n    print(data.colors[i]) --red, green, blue\n  end\nend\n\nprofile:get( colors , onResult)  You can path as far as you need:  gear:get( set1.arms.def , onResult)  Pathing with Set  When using paths with the  set  API call, the usage outlined above stays the same, with some implementation differences when setting a \"root\" path.  When first populating a SkyTable, you  must  pass it a data table to start with. This can be as little as one property, or a whole predefined table. To create the inital SkyTable we do like so:  local profile = skytable:open( profile )\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\nlocal data_tbl = \n{\n  name =  Jim \n}\n\nprofile:set(data_tbl, onSetResult)  Once we have a data table saved to a SkyTable, we can set values on it at a later time by using a path:  local profile = skytable:open( profile )\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\nprofile:set( name ,  Sally , onSetResult)  To add an \"address\" data table to our SkyTable, we can do:  local profile = skytable:open( profile )\n\nlocal address = {\n  street =  123 Main St. ,\n  city =  San Diego ,\n  state =  CA ,\n  zip =  92037 \n}\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\nprofile:set( address , address, onSetResult)  And to change a value in the \"address\" data table:  local profile = skytable:open( profile )\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\nprofile:set( address.city ,  San Francisco , onSetResult)  Or adding an array table:  local profile = skytable:open( profile )\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\nprofile:set( colors , { red , green , blue }, onSetResult)   Important  Once the \"root\" data table has been set for a SkyTable, you cannot overwrite it without specifying a flag.   To  overwrite  a \"root\" data table in a SkyTable, you must pass a special flag. This is not required when creating the initial data.  profile:set(newDataTable, onSetResult, {flag= XX })  This helps prevent overwriting your \"root\" data table by accident. Flags can also be used with data paths, but the pathed value will be overwritten on any  set  call.  See  Flags  for more details.", 
            "title": "Data Paths"
        }, 
        {
            "location": "/guide/#listeners", 
            "text": "Because network requests are not synchronus actions, listeners must be supplied to all SkyTable API calls. The listener is where you will recieve the response from the SkyTable server.  There are two different event types returned from a SkyTable server. One shaped for the  set  call, and another for the remaining value based API calls;  get ,  delete , and  keys .  While you can use one listener for all the API calls, in general its easier to create two different listeners:  local profile = skytable:open( profile )\n\n--Set\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.success)\n  end\nend\n\n--Get, Delete, Keys\nlocal function onResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    local data = evt.data --String, Number, Boolean, Table, or nil\n  end\nend  The main difference between the events are the properties available.  Set event properties:     Name  Description  Type      isError  An error has occured.  Boolean    error  A descriptive error string.  String    success  A flag noting a successful  set  action.  Boolean    key  The user key of the calling client.  String      Note  If set, the  success  flag will almost always be  true . An unsuccessful call will usually be propagated to the  error  property.   Get, Delete, Keys event properties:     Name  Description  Type      isError  An error has occurred.  Boolean    error  A descriptive error string.  String    data  The returned data.  String, Number, Boolean, or Table    key  The user key of the calling client.  String      Note  The  data  property can potentially be  nil .   Best practices  While you can set up general listeners, it's best to assign a specific listener per action:  local profile = skytable:open( profile )\n\nlocal onSetName(evt)\n  if evt.success then\n    print('name saved')\n  end\nend\n\nlocal onSetColors(evt)\n  if evt.success then\n    print('colors saved')\n  end\nend\n\nprofile:set( name ,  Dave , onSetName)\nprofile:set( colors , { red , green , blue }, onSetColors)  This is the recommended approach for the other value based API calls;  get ,  delete , and  keys .  Another option is using  Tags .", 
            "title": "Listeners"
        }, 
        {
            "location": "/guide/#tags", 
            "text": "When using a general listener (see  Listeners ), you can mark an API call with a  tag  to filter the response.  A  tag  is added to a call using the  options  parameter, which takes a table:  local profile = skytable:open( profile )\n\nlocal function onResult(evt)\n  if not evt.isError then\n    print(evt.error)\n  else\n    local data = evt.data\n    if evt.tag ==  get-name  then\n      print(data) -- name string\n    elseif evt.tag ==  get-colors  then\n      print(data[1]) -- colors table array\n    end\n  end\nend\n\nprofile:get( name , onResult, {tag= get-name })\nprofile:get( colors , onResult, {tag= get-colors })  You can also use this method to create one main generalized response listener for both the  set  call, as well as  get ,  delete , and  keys :  local profile = skytable:open( profile )\n\nlocal function onResult(evt)\n  if not evt.isError then\n    print(evt.error)\n  else\n    if evt.tag ==  set-name  then\n      if evt.success then\n        print('name saved')\n      end\n    elseif evt.tag ==  get-colors  then\n      print(evt.data[1]) -- colors table array\n    end\n  end\nend\n\nprofile:set( name ,  Sam , onResult, {tag= set-name })\nprofile:get( colors , onResult, {tag= get-colors })", 
            "title": "Tags"
        }, 
        {
            "location": "/guide/#flags", 
            "text": "When using the  set  API call, you can supply a  flag  to the  options  parameter, as a table.   Flag Types     Name  Description  Type      NX  Set the path value only if the path  does not  exist.  String    XX  Set the path value only if the path  does  exist.  String     local profile = skytable:open( profile )\n\nlocal function onSetResult(evt)\n  if evt.success then\n    print('saved')\n  end\nend\n\n--set the name only if the path exists.\nprofile:set( name , onSetResult, {flag= XX })   Note  When calling a  set  without a flag, the value will be created if the path does not already exists, or replaced if it does.", 
            "title": "Flags"
        }, 
        {
            "location": "/guide/#expiry", 
            "text": "When using the  set  API call, you can also supply an  expiry  to \"expire\" the SkyTable at a specified time.    Warning  Once a SkyTable has been removed via an expiry, it is no longer accessible.   Expiry Properties     Name  Description  Type      seconds  The seconds until the SkyTable will be removed.  Number     local profile = skytable:open( profile )\n\nlocal onSetResult(evt)\n  if evt.success then\n    print('saved', 'expiry:', tostring(evt.expiry))\n  end\nend\n\n--remove the SkyTable in 5 minutes\nprofile:set(data_tbl, onSetResult, {expiry=300})   Note  When a path is updated using the  set  API call, the expiry will be reset to its initial value. For example, if you set a value after 2 minutes on a 5 minute exipry, the expiry will be reset to 5 minutes.    Tip  To automatically clean out inactive SkyTables, set a high expiry value.", 
            "title": "Expiry"
        }, 
        {
            "location": "/guide/#delete", 
            "text": "The  delete  API call will remove a value at the given path.   Warning  This method should be used with caution. When operating on the \"root\" path, the entire data table will be cleared, and the path will no longer exist. Unlike the  set  method flag protection, a  delete  method will do its job as long as the path exists.", 
            "title": "Delete"
        }, 
        {
            "location": "/guide/#keys", 
            "text": "", 
            "title": "Keys"
        }, 
        {
            "location": "/example/", 
            "text": "Basic Get\n\n\nlocal skytable = require(\nskytable.client\n)\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    local tbl = evt.data --data table\n  end\nend\n\nprofile:get(onResult)\n\n\n\n\n\n\nGet with Path\n\n\nlocal skytable = require(\nskytable.client\n)\n\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.data.name)\n  end\nend\n\nprofile:get(\nname\n, onResult)\n\n\n\n\n\n\nGet with Tags\n\n\nlocal skytable = require(\nskytable.client\n)\n\nlocal profile = skytable:open(\nprofile\n)\nlocal location = skytable:open(\nlocation\n)\n\nlocal function onResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    if evt.tag == \nget-name\n then\n      print(evt.data.name)\n    elseif evt.tag == \nget-street\n then\n      print(evt.data.street)\n    end\n  end\nend\n\nprofile:get(\nname\n, onResult, {tag=\nget-name\n})\nlocation:get(\naddress.street\n, onResult, {tag=\nget-street\n})\n\n\n\n\n\n\nBasic Set\n\n\nlocal skytable = require(\nskytable.client\n)\n\nlocal location = skytable:open(\nlocation\n)\n\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.success)\n  end\nend\n\nlocal locationData = \n{\n  address = \n  {\n    street = \n123 Main St.\n,\n    city = \nSan City\n,\n    state = \nAnywhere\n\n  }\n}\n\nlocation:set(locationData, onSetResult)\n\n\n\n\n\n\nSet with Path\n\n\nlocal skytable = require(\nskytable.client\n)\n\nlocal location = skytable:open(\nlocation\n)\n\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.success)\n  end\nend\n\nlocation:set(\naddress.state\n, \nSomeplace\n, onSetResult)\n\n\n\n\n\n\nSet with Tags\n\n\nlocal skytable = require(\nskytable.client\n)\n\nlocal location = skytable:open(\nlocation\n)\nlocal profile = skytable:open(\nprofile\n)\n\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    if evt.tag == \nset-location\n then\n      print(\nSet location\n, evt.success)\n    elseif evt.tag == \nset-profile-name\n then\n      print(\nSet profile\n, evt.success)\n    end\n  end\nend\n\nlocal locationData = \n{\n  address = \n  {\n    street = \n123 Main St.\n,\n    city = \nSan City\n,\n    state = \nAnywhere\n\n  }\n}\n\nlocation:set(locationData, onSetResult, {tag=\nset-location\n})\nprofile:set(\nname\n, \nSteve\n, onSetResult, {tag=\nset-profile-name\n})\n\n\n\n\n\n\nSet with Options\n\n\nlocal skytable = require(\nskytable.client\n)\n\nlocal location = skytable:open(\nlocation\n)\n\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.success)\n  end\nend\n\nlocal locationData = \n{\n  address = \n  {\n    street = \n555 1st Ave.\n,\n    city = \nCitopia\n,\n    state = \nBliss\n\n  }\n}\n\nlocation:set(locationData, onSetResult, {flag = \nXX\n})\n\n\n\n\nSet with Expiry\n\n\nlocal skytable = require(\nskytable.client\n)\n\nlocal location = skytable:open(\nlocation\n)\n\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.success, evt.expiry)\n  end\nend\n\nlocal locationData = \n{\n  address = \n  {\n    street = \n555 1st Ave.\n,\n    city = \nCitopia\n,\n    state = \nBliss\n\n  }\n}\n\nlocation:set(locationData, onSetResult, {expiry = 60})", 
            "title": "Examples"
        }, 
        {
            "location": "/example/#basic-get", 
            "text": "local skytable = require( skytable.client )\n\nlocal profile = skytable:open( profile )\n\nlocal function onResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    local tbl = evt.data --data table\n  end\nend\n\nprofile:get(onResult)", 
            "title": "Basic Get"
        }, 
        {
            "location": "/example/#get-with-path", 
            "text": "local skytable = require( skytable.client )\n\nlocal profile = skytable:open( profile )\n\nlocal function onResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.data.name)\n  end\nend\n\nprofile:get( name , onResult)", 
            "title": "Get with Path"
        }, 
        {
            "location": "/example/#get-with-tags", 
            "text": "local skytable = require( skytable.client )\n\nlocal profile = skytable:open( profile )\nlocal location = skytable:open( location )\n\nlocal function onResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    if evt.tag ==  get-name  then\n      print(evt.data.name)\n    elseif evt.tag ==  get-street  then\n      print(evt.data.street)\n    end\n  end\nend\n\nprofile:get( name , onResult, {tag= get-name })\nlocation:get( address.street , onResult, {tag= get-street })", 
            "title": "Get with Tags"
        }, 
        {
            "location": "/example/#basic-set", 
            "text": "local skytable = require( skytable.client )\n\nlocal location = skytable:open( location )\n\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.success)\n  end\nend\n\nlocal locationData = \n{\n  address = \n  {\n    street =  123 Main St. ,\n    city =  San City ,\n    state =  Anywhere \n  }\n}\n\nlocation:set(locationData, onSetResult)", 
            "title": "Basic Set"
        }, 
        {
            "location": "/example/#set-with-path", 
            "text": "local skytable = require( skytable.client )\n\nlocal location = skytable:open( location )\n\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.success)\n  end\nend\n\nlocation:set( address.state ,  Someplace , onSetResult)", 
            "title": "Set with Path"
        }, 
        {
            "location": "/example/#set-with-tags", 
            "text": "local skytable = require( skytable.client )\n\nlocal location = skytable:open( location )\nlocal profile = skytable:open( profile )\n\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    if evt.tag ==  set-location  then\n      print( Set location , evt.success)\n    elseif evt.tag ==  set-profile-name  then\n      print( Set profile , evt.success)\n    end\n  end\nend\n\nlocal locationData = \n{\n  address = \n  {\n    street =  123 Main St. ,\n    city =  San City ,\n    state =  Anywhere \n  }\n}\n\nlocation:set(locationData, onSetResult, {tag= set-location })\nprofile:set( name ,  Steve , onSetResult, {tag= set-profile-name })", 
            "title": "Set with Tags"
        }, 
        {
            "location": "/example/#set-with-options", 
            "text": "local skytable = require( skytable.client )\n\nlocal location = skytable:open( location )\n\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.success)\n  end\nend\n\nlocal locationData = \n{\n  address = \n  {\n    street =  555 1st Ave. ,\n    city =  Citopia ,\n    state =  Bliss \n  }\n}\n\nlocation:set(locationData, onSetResult, {flag =  XX })", 
            "title": "Set with Options"
        }, 
        {
            "location": "/example/#set-with-expiry", 
            "text": "local skytable = require( skytable.client )\n\nlocal location = skytable:open( location )\n\nlocal function onSetResult(evt)\n  if evt.isError then\n    print(evt.error)\n  else\n    print(evt.success, evt.expiry)\n  end\nend\n\nlocal locationData = \n{\n  address = \n  {\n    street =  555 1st Ave. ,\n    city =  Citopia ,\n    state =  Bliss \n  }\n}\n\nlocation:set(locationData, onSetResult, {expiry = 60})", 
            "title": "Set with Expiry"
        }, 
        {
            "location": "/about/", 
            "text": "Code and documentation \u00a92017 C. Byerley (\ndevelephant\n).\n\n\nLicensed under the \nApache 2.0\n license.", 
            "title": "About"
        }
    ]
}