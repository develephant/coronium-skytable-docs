{
    "docs": [
        {
            "location": "/",
            "text": "Coronium SkyTable\n\n\nA performant and secure user scoped table datastore and client for use with \nCorona\n.\n\n\nAvailable for installation as a \nDigitalOcean\n droplet or \nAmamzon EC2\n instance.\n\n\n\n\nPlugin Required\n\n\nYou will need the \nCoronium SkyTable Plugin\n available in the \nCorona Marketplace\n, in addition to a running server install.",
            "title": "Introduction"
        },
        {
            "location": "/#coronium-skytable",
            "text": "A performant and secure user scoped table datastore and client for use with  Corona .  Available for installation as a  DigitalOcean  droplet or  Amamzon EC2  instance.   Plugin Required  You will need the  Coronium SkyTable Plugin  available in the  Corona Marketplace , in addition to a running server install.",
            "title": "Coronium SkyTable"
        },
        {
            "location": "/install/digitalocean/",
            "text": "Coronium SkyTable\n runs best on a \nDigitalOcean\n Ubuntu 16.04\n droplet.\n\n\n\n\nTip\n\n\nIf you're new to \nDigitalOcean\n please consider signing up with \nthis link\n. Not only will you receive a $10 credit (2 free months), but it also helps support the continued development, and testing of \nCoronium SkyTable\n.\n\n\n\n\n\n\nScreencast\n\n\nView the installation instructions in a screencast format by \nclicking here\n.\n\n\n\n\nCreate A Droplet\n\n\nOnce you log into your \nDigitalOcean\n account, click the \nCreate\n button and select \nDroplets\n from the menu.\n\n\n\n\nOn the next screen, first select a \nUbuntu 16.04\n droplet distribution.\n\n\n \n\n\nSelect your preferred droplet size. A \n512MB/1 CPU\n droplet is a good starting point. You can always increase the size later.\n\n\n\n\nNext, select a region for the droplet. Consider choosing a location closest to your most active user base.\n\n\n\n\nSelect your SSH profile to attach to the droplet.\n\n\n\n\n\n\nCaution\n\n\nThere is an option where you can use a password instead of an SSH key, which may be easier if you're only testing \nCoronium SkyTable\n, though I wouldn't recommend it. You can learn more about generating SSH keys for \nDigitalOcean\n here: \nCreating SSH Keys\n.\n\n\n\n\nNow give your droplet a hostname.\n\n\n\n\nBe sure to replace \nskytable.develephant.com\n with your own hostname.\n\n\nAnd finally, click the \nCreate\n button to spin up the droplet.\n\n\n\n\nInstall SkyTable\n\n\nOnce your droplet is done spinning up, note the ip address.\n\n\n\n\nUsing a terminal/shell of your choice, SSH into the droplet.\n\n\n\n\nTip\n\n\nYou can use the built in shells on both OSX and Linux. For Windows, check out \nPuTTY\n.\n\n\n\n\nssh root@<your-instance-ip>\n\n\n\n\n\nReplace \n<your-instance-ip>\n with the address that was assigned to your droplet.\n\n\nOnce you are connected to the droplet, copy and paste the following line into the terminal:\n\n\ncurl -LO https://s3.amazonaws.com/coronium-skytable/up.sh && sudo bash ./up.sh\n\n\nOnce the installation is complete, \nCoronium SkyTable\n is ready for action. Log out of the server by typing \nexit\n on the command line.\n\n\n\n\nUpgrade to HTTPS\n\n\nNow is a good time to secure your SkyTable server using HTTPS. See the \nHTTPS/SSL\n section of the documentation.",
            "title": "DigitalOcean"
        },
        {
            "location": "/install/digitalocean/#create-a-droplet",
            "text": "Once you log into your  DigitalOcean  account, click the  Create  button and select  Droplets  from the menu.   On the next screen, first select a  Ubuntu 16.04  droplet distribution.     Select your preferred droplet size. A  512MB/1 CPU  droplet is a good starting point. You can always increase the size later.   Next, select a region for the droplet. Consider choosing a location closest to your most active user base.   Select your SSH profile to attach to the droplet.    Caution  There is an option where you can use a password instead of an SSH key, which may be easier if you're only testing  Coronium SkyTable , though I wouldn't recommend it. You can learn more about generating SSH keys for  DigitalOcean  here:  Creating SSH Keys .   Now give your droplet a hostname.   Be sure to replace  skytable.develephant.com  with your own hostname.  And finally, click the  Create  button to spin up the droplet.",
            "title": "Create A Droplet"
        },
        {
            "location": "/install/digitalocean/#install-skytable",
            "text": "Once your droplet is done spinning up, note the ip address.   Using a terminal/shell of your choice, SSH into the droplet.   Tip  You can use the built in shells on both OSX and Linux. For Windows, check out  PuTTY .   ssh root@<your-instance-ip>  Replace  <your-instance-ip>  with the address that was assigned to your droplet.  Once you are connected to the droplet, copy and paste the following line into the terminal:  curl -LO https://s3.amazonaws.com/coronium-skytable/up.sh && sudo bash ./up.sh  Once the installation is complete,  Coronium SkyTable  is ready for action. Log out of the server by typing  exit  on the command line.   Upgrade to HTTPS  Now is a good time to secure your SkyTable server using HTTPS. See the  HTTPS/SSL  section of the documentation.",
            "title": "Install SkyTable"
        },
        {
            "location": "/install/ec2/",
            "text": "Coronium SkyTable\n is eligible for the EC2 free tier using Amazon Web Services.\n\n\n\n\nPrerequisites\n\n\nThis guide assumes that you have an active AWS account, and are familiar with managing EC2 instances.\n\n\n\n\n\n\nScreencast\n\n\nView the installation instructions in a screencast format by \nclicking here\n.\n\n\n\n\nCreate An Instance\n\n\nOnce you log into the \nAWS Console\n, navigate to the \nEC2\n service. Click the \nLaunch Instance\n button.\n\n\nOn the next screen, find the \nUbuntu Server 16.04 LTS (HVM)\n AMI, and click the \nSelect\n button on the right.\n\n\nSelect your preferred instance type. A \nt2.micro\n is a good starting point. You can always increase the size later.\n\n\nClick the \nAdd Rule\n button on the \nConfigure Security Group\n screen, and add the following:\n\n\n\n\n\n\n\n\nType\n\n\nProtocol\n\n\nPort Range\n\n\nSource\n\n\n\n\n\n\n\n\n\n\nCustom TCP\n\n\nTCP\n\n\n7173\n\n\nAnywhere\n\n\n\n\n\n\n\n\nAdjust any additional settings, and then \nLaunch\n the AMI.\n\n\nInstall SkyTable\n\n\nOnce your instance is in a \nrunning\n state, note the \nIPv4 Public IP\n address.\n\n\nUsing a terminal/shell of your choice, SSH into the instance.\n\n\n\n\nTip\n\n\nYou can use the built in shells on both OSX and Linux. For Windows, check out \nPuTTY\n.\n\n\n\n\nssh -i <path/to/.pem> ubuntu@<your-instance-ip>\n\n\n\n\n\nReplace \n<your-instance-ip>\n with the address that was assigned to your instance.\n\n\nOnce you are connected to the droplet, copy and paste the following line into the terminal:\n\n\ncurl -LO https://s3.amazonaws.com/coronium-skytable/ami.sh && sudo bash ./ami.sh\n\n\nOnce the installation is complete, \nCoronium SkyTable\n is ready for action. Log out of the server by typing \nexit\n on the command line.\n\n\n\n\nUpgrade to HTTPS\n\n\nNow is a good time to secure your SkyTable server using HTTPS. See the \nHTTPS/SSL\n section of the documentation.",
            "title": "Amazon EC2"
        },
        {
            "location": "/install/ec2/#create-an-instance",
            "text": "Once you log into the  AWS Console , navigate to the  EC2  service. Click the  Launch Instance  button.  On the next screen, find the  Ubuntu Server 16.04 LTS (HVM)  AMI, and click the  Select  button on the right.  Select your preferred instance type. A  t2.micro  is a good starting point. You can always increase the size later.  Click the  Add Rule  button on the  Configure Security Group  screen, and add the following:     Type  Protocol  Port Range  Source      Custom TCP  TCP  7173  Anywhere     Adjust any additional settings, and then  Launch  the AMI.",
            "title": "Create An Instance"
        },
        {
            "location": "/install/ec2/#install-skytable",
            "text": "Once your instance is in a  running  state, note the  IPv4 Public IP  address.  Using a terminal/shell of your choice, SSH into the instance.   Tip  You can use the built in shells on both OSX and Linux. For Windows, check out  PuTTY .   ssh -i <path/to/.pem> ubuntu@<your-instance-ip>  Replace  <your-instance-ip>  with the address that was assigned to your instance.  Once you are connected to the droplet, copy and paste the following line into the terminal:  curl -LO https://s3.amazonaws.com/coronium-skytable/ami.sh && sudo bash ./ami.sh  Once the installation is complete,  Coronium SkyTable  is ready for action. Log out of the server by typing  exit  on the command line.   Upgrade to HTTPS  Now is a good time to secure your SkyTable server using HTTPS. See the  HTTPS/SSL  section of the documentation.",
            "title": "Install SkyTable"
        },
        {
            "location": "/install/testing/",
            "text": "To quickly verify the server connection, point your browser to:\n\n\nhttp://<your-instance-ip>:7173\n\n\n\n\n\nThe server should respond with:\n\n\n{\n  error: 401,\n  result: \"Unauthorized\"\n}",
            "title": "Quick Test"
        },
        {
            "location": "/server/config/",
            "text": "After the \nCoronium SkyTable\n server is running, you can change the server key which the plugin uses to connect to your instance.\n\n\nLog in with the \ncoronium\n user:\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nEnter your password. If you have not updated the password yet, the default is \ncoroniumadmin\n.\n\n\nOpen the \nconfig.lua\n using the \nnano\n file editor:\n\n\nnano ~/lib/coronium/config.lua\n\n\n\n\n\nYou should see the following content in the \nconfig.lua\n file:\n\n\nreturn \n{\n  key = \"ab34b95ef9cc8b024bd184\"\n}\n\n\n\n\n\nUse the arrow keys to move the cursor, and replace the \nkey\n value, making sure to keep it enclosed in quotes:\n\n\nreturn \n{\n  key = \"12345abcdefg\"\n}\n\n\n\n\n\nWhen your changes have been made, use \ncontrol-x\n , then press \ny\n, and then press enter, to save the changes.\n\n\nReload the underlying \nnginx\n process to pick up the new configuration:\n\n\nsudo monit restart nginx\n\n\n\n\n\nClose the shell connection with:\n\n\nexit\n\n\n\n\n\n\n\nNote\n\n\nThe \nkey\n value will need to be added/updated in the plugin \ninit\n method as well. See \nGetting Started\n.",
            "title": "Configuration"
        },
        {
            "location": "/server/password/",
            "text": "The default password for a fresh install is: \ncoroniumadmin\n.\n\n\n\n\nWarning\n\n\nYou should change the default password after the install.\n\n\n\n\nLog in with the \ncoronium\n user:\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nUse the following command to change the password:\n\n\nsudo passwd coronium\n\n\n\n\n\nAnd then follow the prompts.\n\n\nWhen you are finished, close the connection:\n\n\nexit",
            "title": "Password"
        },
        {
            "location": "/server/logs/",
            "text": "To view log files, connect to the server with the \ncoronium\n user.\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nLog files can be found in the \nlogs\n directory.\n\n\nTo watch a log file in real-time:\n\n\ntail -f ~/logs/<log-name>.log\n\n\n\n\n\nPress \ncontrol-x\n to stop watching the log file.\n\n\n\n\nNote\n\n\nThe log files are managed automatically, and will be \"rotated\" once they exceed a certain size limit.",
            "title": "Logs"
        },
        {
            "location": "/server/system/",
            "text": "When your \nCoronium SkyTable\n server starts, its monitored by a utility called \nMonit\n, which makes sure that the required processes stay active. In the event that a process runs into an issue or crashes, it will be restarted shortly.\n\n\nIn the rare case where you need to manually stop or start the processes, log in using the \ncoronium\n user.\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nTo stop the processes, on the command line, enter:\n\n\nsudo coronium stop\n\n\n\n\n\nTo start the processes, use:\n\n\nsudo coronium start\n\n\n\n\n\n\n\nCaution\n\n\nYou should rarely need to manually control the processes.",
            "title": "System Service"
        },
        {
            "location": "/guide/",
            "text": "Get The Plugin\n\n\nIf you don't already have it, get the \nCoronium SkyTable Plugin\n from the \nCorona Marketplace\n.\n\n\nAdding The Plugin\n\n\nAdd the plugin by adding an entry to the \nplugins\n table of \nbuild.settings\n file:\n\n\nsettings =\n{\n    plugins =\n    {\n        [\"plugin.skytable\"] =\n        {\n            publisherId = \"com.develephant\"\n        },\n    },\n}\n\n\n\n\n\nYou're now ready to use the \nCoronium SkyTable\n plugin.\n\n\nGetting Started\n\n\nA SkyTable is a \nuser scoped\n data table. This means the data is tied to a \nsingle\n user. It is less of a database, and more of a secure per user table datastore.\n\n\n\n\nImportant\n\n\nMake sure you understand how \nCoronium SkyTable\n works before commiting to using it in your project. \nYou cannot access any other data than the user provided credentials allow.\n\n\n\n\nWhile a SkyTable is tied to a specific user, you can create as many specific, per user, SkyTables as you need for a given application (See \nopen\n).\n\n\nExample of basic usage:\n\n\n--Require plugin\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"plugin.skytable\"\n)\n\n\n\n--Initialize SkyTable\n\n\nskytable\n:\ninit\n({\n\n  \nuser\n \n=\n \n\"<user-email>\"\n,\n\n  \npassword\n \n=\n \n\"<user-password>\"\n,\n\n  \nbase\n \n=\n \n\"app1\"\n,\n\n  \nkey\n \n=\n \n\"<server-key>\"\n,\n\n  \nhost\n \n=\n \n\"http://<server-host>:7173\"\n,\n\n  \ndebug\n \n=\n \ntrue\n\n\n})\n\n\n\n--Open a \"profile\" SkyTable\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\n--Get action listener\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\ndata\n.\nname\n)\n \n-- Jimmy\n\n  \nend\n\n\nend\n\n\n\n--Set action listener\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nsuccess\n \nthen\n\n      \nprint\n(\n'saved'\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n--Setting data\n\n\nlocal\n \nfunction\n \nsetData\n()\n\n  \n--Set action\n\n  \nprofile\n:\nset\n({\nname\n=\n\"Jimmy\"\n,\n \nage\n=\n23\n},\n \nonSetResult\n)\n\n\nend\n\n\n\n--Getting data\n\n\nlocal\n \nfunction\n \ngetData\n()\n\n  \n--Get action\n\n  \nprofile\n:\nget\n(\nonResult\n)\n\n\nend\n\n\n\n--Set the data\n\n\nsetData\n()\n\n\n\n--OR, get the data\n\n\n--getData()\n\n\n\n\n\n\n\n\nUser Scope\n\n\nA SkyTable, and its data, is scoped per user. When first initalizing the SkyTable client, you must provide a \nusername\n (usually an email address), and a \npassword\n. These values are the responsibility of the developer to gather.\n\n\n\n\nNote\n\n\nThe \nusername\n and \npassword\n are never stored on the SkyTable server. Instead a unique key is generated to identify the user.\n\n\n\n\nThe \nusername\n and \npassword\n are passed to the \ninit\n API method:\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"plugin.skytable\"\n)\n\n\n\nskytable\n:\ninit\n({\n\n  \nuser\n \n=\n \n\"user@email.com\"\n,\n\n  \npassword\n \n=\n \n\"<user-password>\"\n,\n\n  \n...\n\n\n})\n\n\n\n\n\n\nThis feature allows your user to run your application on different devices, and have their data \"synced\" between sessions.\n\n\nSee the \ninit\n API method for more details.\n\n\n\n\nWarning\n\n\nIf a \nusername\n and/or \npassword\n are changed, it is the responsibilty of the developer to \ndelete\n the old data, and initalize the new tables using the updated \nusername\n and \npassword\n.\n\n\n\n\n\n\nBase Scope\n\n\nYou can also assign a \nbase scope\n to the SkyTable. This allows the saving of different data tables, per user, for multiple applications. A user can use the same \nusername\n and \npassword\n across all of your different applications.\n\n\n\n\nTip\n\n\nEven if you don't think you will have the same users on different applications, it is a best practice to assign a \nbase scope\n anyway. This future-proofs the SkyTable data.\n\n\n\n\nThe \nbase scope\n is assigned in the \ninit\n Api method:\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"plugin.skytable\"\n)\n\n\n\nskytable\n:\ninit\n({\n\n  \nuser\n \n=\n \n\"user@email.com\"\n,\n\n  \npassword\n \n=\n \n\"<user-password>\"\n,\n\n  \nbase\n \n=\n \n\"app1\"\n,\n\n  \n...\n\n\n})\n\n\n\n\n\n\nNow when we want to access data from a different app (in this case \"app2\"), for the same user, we can do:\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"plugin.skytable\"\n)\n\n\n\nskytable\n:\ninit\n({\n\n  \nuser\n \n=\n \n\"user@email.com\"\n,\n\n  \npassword\n \n=\n \n\"<user-password>\"\n,\n\n  \nbase\n \n=\n \n\"app2\"\n,\n \n--different base scope\n\n  \n...\n\n\n})\n\n\n\n\n\n\nSee the \ninit\n API method for more details.\n\n\n\n\nListeners\n\n\nBecause network requests are asynchronus actions, listeners must be supplied to all SkyTable API calls. The listener is where you will recieve the response from the SkyTable server.\n\n\nThere are two different event types returned from a SkyTable server. One shaped for the \nset\n call, and another for the remaining value based API calls; \nget\n, \ndelete\n, and \nkeys\n.\n\n\nWhile you can use one listener for all the API calls, in general its easier to create two different listeners:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\n--Set\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n)\n\n  \nend\n\n\nend\n\n\n\n--Get, Delete, Keys\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \ndata\n \n=\n \nevt\n.\ndata\n \n--String, Number, Boolean, Table, or nil\n\n  \nend\n\n\nend\n\n\n\n--Set something\n\n\nprofile\n:\nset\n(\n\"name\"\n,\n \n\"Marco\"\n,\n \nonSetResult\n)\n\n\n\n--Get something\n\n\nprofile\n:\nget\n(\n\"address.street\"\n,\n \nonResult\n)\n\n\n\n\n\n\nThe main difference between the events are the properties available.\n\n\nSet event properties:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nisError\n\n\nAn error has occured.\n\n\nBoolean\n\n\n\n\n\n\nerror\n\n\nA descriptive error string.\n\n\nString\n\n\n\n\n\n\nsuccess\n\n\nA flag noting a successful \nset\n action.\n\n\nBoolean\n\n\n\n\n\n\nuser\n\n\nThe user key of the calling client.\n\n\nString\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf set, the \nsuccess\n flag will almost always be \ntrue\n. An unsuccessful call will usually be propagated to the \nerror\n property.\n\n\n\n\nGet, Delete, Keys event properties:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nisError\n\n\nAn error has occurred.\n\n\nBoolean\n\n\n\n\n\n\nerror\n\n\nA descriptive error string.\n\n\nString\n\n\n\n\n\n\ndata\n\n\nThe returned data.\n\n\nString, Number, Boolean, or Table\n\n\n\n\n\n\nuser\n\n\nThe user key of the calling client.\n\n\nString\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe \ndata\n property can potentially be \nnil\n.\n\n\n\n\nBest practices\n\n\nWhile you can set up general listeners, it's best to assign a specific listener per action:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nonSetName\n(\nevt\n)\n\n  \nif\n \nevt\n.\nsuccess\n \nthen\n\n    \nprint\n(\n'name saved'\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nonSetColors\n(\nevt\n)\n\n  \nif\n \nevt\n.\nsuccess\n \nthen\n\n    \nprint\n(\n'colors saved'\n)\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nset\n(\n\"name\"\n,\n \n\"Dave\"\n,\n \nonSetName\n)\n\n\nprofile\n:\nset\n(\n\"colors\"\n,\n \n{\n\"red\"\n,\n\"green\"\n,\n\"blue\"\n},\n \nonSetColors\n)\n\n\n\n\n\n\nThis is the recommended approach for the other value based API calls; \nget\n, \ndelete\n, and \nkeys\n.\n\n\nAnother option is using \nTags\n.\n\n\n\n\nData Paths\n\n\nData paths allow you to \"path\" to a value in the SkyTable, both to \nset\n and \nget\n the underlying value. Data paths can be used in all of the value based API calls. This includes \nget\n, \nset\n, \ndelete\n, and \nkeys\n.\n\n\nWhen calling any of the value methods \nwithout\n a data path, a \"root\" path is implied. For example, let's assume the following data exists in a \"profile\" SkyTable:\n\n\n{\n\n  \nname\n \n=\n \n\"Jim\"\n,\n\n  \nage\n \n=\n \n34\n,\n\n  \nactive\n \n=\n \ntrue\n,\n\n  \naddress\n \n=\n \n{\n\n    \nstreet\n \n=\n \n\"123 Main St.\"\n,\n\n    \ncity\n \n=\n \n\"San Diego\"\n,\n\n    \nstate\n \n=\n \n\"CA\"\n,\n\n    \nzip\n \n=\n \n92037\n\n  \n},\n\n  \ncolors\n \n=\n \n{\n\"red\"\n,\n \n\"green\"\n,\n \n\"blue\"\n}\n\n\n}\n\n\n\n\n\n\nPathing with Get\n\n\nThen following call brings back the entire SkyTable (its \"root\" path):\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nlocal\n \ndata\n \n=\n \nevt\n.\ndata\n \n--the entire data table\n\n  \nprint\n(\ndata\n.\nname\n)\n \n-- Jim\n\n\nend\n\n\n\nprofile\n:\nget\n(\nonResult\n)\n\n\n\n\n\n\nTo gain access to an individual value in the SkyTable, we can supply a path:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nlocal\n \ndata\n \n=\n \nevt\n.\ndata\n \n--holds \"name\" value\n\n  \nprint\n(\ndata\n)\n \n-- Jim\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"name\"\n,\n \nonResult\n)\n\n\n\n\n\n\nTo dive even deeper into the SkyTable, just path to the key, using a \"dot\" separator:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nlocal\n \ndata\n \n=\n \nevt\n.\ndata\n \n--holds \"city\" value\n\n  \nprint\n(\ndata\n)\n \n-- San Diego\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"address.city\"\n,\n \nonResult\n)\n\n\n\n\n\n\nIf we wanted the entire \"address\" table:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nlocal\n \ndata\n \n=\n \nevt\n.\ndata\n \n--entire address table\n\n  \nprint\n(\naddress\n.\nstate\n)\n \n-- CA\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"address\"\n,\n \nonResult\n)\n\n\n\n\n\n\nOr the \"colors\" table array:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nlocal\n \ndata\n \n=\n \nevt\n.\ndata\n \n--entire colors array\n\n  \nfor\n \ni\n=\n1\n,\n \n#\ndata\n.\ncolors\n  \ndo\n\n    \nprint\n(\ndata\n.\ncolors\n[\ni\n])\n \n--red, green, blue\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"colors\"\n,\n \nonResult\n)\n\n\n\n\n\n\nYou can path as far as you need:\n\n\ngear\n:\nget\n(\n\"set1.arms.def\"\n,\n \nonResult\n)\n\n\n\n\n\n\nPathing with Set\n\n\nWhen using paths with the \nset\n API call, the usage outlined above stays the same, with some implementation differences when setting a \"root\" path.\n\n\nWhen first populating a SkyTable, you \nmust\n pass it a data table to start with. This can be as little as one property, or a whole predefined table. To create the inital SkyTable we do like so:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nsuccess\n \nthen\n\n    \nprint\n(\n'saved'\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \ndata_tbl\n \n=\n \n\n{\n\n  \nname\n \n=\n \n\"Jim\"\n\n\n}\n\n\n\nprofile\n:\nset\n(\ndata_tbl\n,\n \nonSetResult\n)\n\n\n\n\n\n\nOnce we have a data table saved to a SkyTable, we can set values on it at a later time by using a path:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nsuccess\n \nthen\n\n    \nprint\n(\n'saved'\n)\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nset\n(\n\"name\"\n,\n \n\"Sally\"\n,\n \nonSetResult\n)\n\n\n\n\n\n\nTo add an \"address\" data table to our SkyTable, we can do:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \naddress\n \n=\n \n{\n\n  \nstreet\n \n=\n \n\"123 Main St.\"\n,\n\n  \ncity\n \n=\n \n\"San Diego\"\n,\n\n  \nstate\n \n=\n \n\"CA\"\n,\n\n  \nzip\n \n=\n \n92037\n\n\n}\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nsuccess\n \nthen\n\n    \nprint\n(\n'saved'\n)\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nset\n(\n\"address\"\n,\n \naddress\n,\n \nonSetResult\n)\n\n\n\n\n\n\nAnd to change a value in the \"address\" data table:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nsuccess\n \nthen\n\n    \nprint\n(\n'saved'\n)\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nset\n(\n\"address.city\"\n,\n \n\"San Francisco\"\n,\n \nonSetResult\n)\n\n\n\n\n\n\nOr adding an array table:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nsuccess\n \nthen\n\n    \nprint\n(\n'saved'\n)\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nset\n(\n\"colors\"\n,\n \n{\n\"red\"\n,\n\"green\"\n,\n\"blue\"\n},\n \nonSetResult\n)\n\n\n\n\n\n\n\n\nImportant\n\n\nOnce the \"root\" data table has been set for a SkyTable, you cannot overwrite it without specifying a flag.\n\n\n\n\nTo \noverwrite\n a \"root\" data table in a SkyTable, you must pass a special flag. This is not required when creating the initial data.\n\n\nprofile\n:\nset\n(\nnewDataTable\n,\n \nonSetResult\n,\n \n{\nflag\n=\n\"XX\"\n})\n\n\n\n\n\n\nThis helps prevent overwriting your \"root\" data table by accident. Flags can also be used with data paths, but the pathed value will be overwritten on any \nset\n call.\n\n\nSee \nFlags\n for more details.\n\n\n\n\nTags\n\n\nWhen using a general listener (see \nListeners\n), you can mark an API call with a \ntag\n to filter the response.\n\n\nA \ntag\n is added to a call using the \noptions\n parameter, which takes a table:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nnot\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \ndata\n \n=\n \nevt\n.\ndata\n\n    \nif\n \nevt\n.\ntag\n \n==\n \n\"get-name\"\n \nthen\n\n      \nprint\n(\ndata\n)\n \n-- name string\n\n    \nelseif\n \nevt\n.\ntag\n \n==\n \n\"get-colors\"\n \nthen\n\n      \nprint\n(\ndata\n[\n1\n])\n \n-- colors table array\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"name\"\n,\n \nonResult\n,\n \n{\ntag\n=\n\"get-name\"\n})\n\n\nprofile\n:\nget\n(\n\"colors\"\n,\n \nonResult\n,\n \n{\ntag\n=\n\"get-colors\"\n})\n\n\n\n\n\n\nYou can also use this method to create one main generalized response listener for both the \nset\n call, as well as \nget\n, \ndelete\n, and \nkeys\n:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nnot\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\ntag\n \n==\n \n\"set-name\"\n \nthen\n\n      \nif\n \nevt\n.\nsuccess\n \nthen\n\n        \nprint\n(\n'name saved'\n)\n\n      \nend\n\n    \nelseif\n \nevt\n.\ntag\n \n==\n \n\"get-colors\"\n \nthen\n\n      \nprint\n(\nevt\n.\ndata\n[\n1\n])\n \n-- colors table array\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nset\n(\n\"name\"\n,\n \n\"Sam\"\n,\n \nonResult\n,\n \n{\ntag\n=\n\"set-name\"\n})\n\n\nprofile\n:\nget\n(\n\"colors\"\n,\n \nonResult\n,\n \n{\ntag\n=\n\"get-colors\"\n})\n\n\n\n\n\n\n\n\nFlags\n\n\nWhen using the \nset\n API call, you can supply a \nflag\n to the \noptions\n parameter, as a table. \n\n\nFlag Types\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nNX\n\n\nSet the path value only if the path \ndoes not\n exist.\n\n\nString\n\n\n\n\n\n\nXX\n\n\nSet the path value only if the path \ndoes\n exist.\n\n\nString\n\n\n\n\n\n\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nsuccess\n \nthen\n\n    \nprint\n(\n'saved'\n)\n\n  \nend\n\n\nend\n\n\n\n--set the name only if the path exists.\n\n\nprofile\n:\nset\n(\n\"name\"\n,\n \nonSetResult\n,\n \n{\nflag\n=\n\"XX\"\n})\n\n\n\n\n\n\n\n\nNote\n\n\nWhen calling a \nset\n without a flag, the value will be created if the path does not already exists, or replaced if it does.\n\n\n\n\n\n\nExpiry\n\n\nWhen using the \nset\n API call, you can also supply an \nexpiry\n to \"expire\" the SkyTable at a specified time. \n\n\n\n\nWarning\n\n\nOnce a SkyTable has been removed via an expiry, it is no longer accessible.\n\n\n\n\nExpiry Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nThe seconds until the SkyTable will be removed.\n\n\nNumber\n\n\n\n\n\n\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nsuccess\n \nthen\n\n    \nprint\n(\n'saved'\n,\n \n'expiry:'\n,\n \ntostring\n(\nevt\n.\nexpiry\n))\n\n  \nend\n\n\nend\n\n\n\n--remove the SkyTable in 5 minutes\n\n\nprofile\n:\nset\n(\ndata_tbl\n,\n \nonSetResult\n,\n \n{\nexpiry\n=\n300\n})\n\n\n\n\n\n\n\n\nNote\n\n\nWhen a path is updated using the \nset\n API call, the expiry will be reset to its initial value. For example, if you set a value after 2 minutes on a 5 minute exipry, the expiry will be reset to 5 minutes.\n\n\n\n\n\n\nTip\n\n\nTo automatically clean out inactive SkyTables, set a high expiry value.\n\n\n\n\n\n\nDelete\n\n\nThe \ndelete\n API call will remove a value at the given path.\n\n\n\n\nWarning\n\n\nThis method should be used with caution. \nWhen operating on the \"root\" path, the entire data table will be cleared\n, and the path will no longer exist. Unlike \nset\n, with its \nflag protection\n, a \ndelete\n method will do its job as long as the path exists.\n\n\n\n\nTo delete a value at the specified path:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nnot\n \nevt\n.\nisError\n \nthen\n\n    \nif\n \nevt\n.\ndata\n \n>\n \n0\n \nthen\n\n      \nprint\n(\n'name deleted from profile'\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\ndelete\n(\n\"name\"\n,\n \nonResult\n)\n\n\n\n\n\n\n\n\nNote\n\n\nA \ndelete\n event will contain a \ndata\n property with a number noting the value paths removed. Most often this will be a one (1). In the case of a failed attempt, or invalid path, the \ndata\n will contain the number zero (0).\n\n\n\n\n\n\nKeys\n\n\nThe \nkeys\n API call will return a tables keys in the SkyTable at the given path. Using our \"profile\" example, we can return all the keys at the \"root\" path like so:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nnot\n \nevt\n.\nisError\n \nthen\n\n    \nlocal\n \nkeys\n \n=\n \nevt\n.\ndata\n\n    \n--keys = {\"name\",\"age\",\"active\",\"address\",\"colors\"}\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nkeys\n(\nonResult\n)\n\n\n\n\n\n\nUsing a path to a nested table:\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nnot\n \nevt\n.\nisError\n \nthen\n\n    \nlocal\n \nkeys\n \n=\n \nevt\n.\ndata\n\n    \n--keys = {\"street\",\"city\",\"state\",\"zip\"}\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nkeys\n(\n\"address\"\n,\n \nonResult\n)\n\n\n\n\n\n\n\n\nNote\n\n\nYou can only access keys from data tables.\n\n\n\n\n\n\nSyncing Data\n\n\nWith the use of data paths (see \nData Paths\n), you can \nget\n and \nset\n values from different levels of the SkyTable.\n\n\nAs a best practice, and to keep your data synced between client and server, it is best to create or cache a local data table first, make changes to that table, and then push it to the server. This helps keep your data in sync easier.\n\n\nlocal\n \nprofile_data\n \n=\n \n{}\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetProfile\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nsuccess\n \nthen\n\n      \nprint\n(\n'profile saved'\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonGetProfile\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \n--check if we have existing data\n\n    \nif\n \nevt\n.\ndata\n \n~=\n \nnil\n \nthen\n\n      \nprofile_data\n \n=\n \nevt\n.\ndata\n\n    \nelse\n\n      \n--there is no data table yet, create a default one\n\n      \nprofile_data\n \n=\n \n{\n\n        \nname\n \n=\n \n\"Tammy\"\n,\n\n        \nage\n \n=\n \n45\n\n      \n}\n\n      \nprofile\n:\nset\n(\nprofile_data\n,\n \nonSetProfile\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\nonGetProfile\n)\n\n\n\n\n\n\nOnce you have the local data table, use it to manage the data, and push it back to the server after any changes:\n\n\nprofile_data\n.\nactive\n \n=\n \ntrue\n\n\nprofile_data\n.\ncolors\n \n=\n \n{\n\"red\"\n,\n\"green\"\n,\n\"blue\"\n}\n\n\n\nprofile\n:\nset\n(\nprofile_data\n,\n \nonSetProfile\n,\n \n{\nflag\n=\n\"XX\"\n})\n\n\n\n\n\n\n\n\nNote\n\n\nWhen \nreplacing\n a \"root\" value (as above), you must specify the \"XX\" flag. See \nFlags\n.",
            "title": "Client Guide"
        },
        {
            "location": "/guide/#get-the-plugin",
            "text": "If you don't already have it, get the  Coronium SkyTable Plugin  from the  Corona Marketplace .",
            "title": "Get The Plugin"
        },
        {
            "location": "/guide/#adding-the-plugin",
            "text": "Add the plugin by adding an entry to the  plugins  table of  build.settings  file:  settings =\n{\n    plugins =\n    {\n        [\"plugin.skytable\"] =\n        {\n            publisherId = \"com.develephant\"\n        },\n    },\n}  You're now ready to use the  Coronium SkyTable  plugin.",
            "title": "Adding The Plugin"
        },
        {
            "location": "/guide/#getting-started",
            "text": "A SkyTable is a  user scoped  data table. This means the data is tied to a  single  user. It is less of a database, and more of a secure per user table datastore.   Important  Make sure you understand how  Coronium SkyTable  works before commiting to using it in your project.  You cannot access any other data than the user provided credentials allow.   While a SkyTable is tied to a specific user, you can create as many specific, per user, SkyTables as you need for a given application (See  open ).  Example of basic usage:  --Require plugin  local   skytable   =   require ( \"plugin.skytable\" )  --Initialize SkyTable  skytable : init ({ \n   user   =   \"<user-email>\" , \n   password   =   \"<user-password>\" , \n   base   =   \"app1\" , \n   key   =   \"<server-key>\" , \n   host   =   \"http://<server-host>:7173\" , \n   debug   =   true  })  --Open a \"profile\" SkyTable  local   profile   =   skytable : open ( \"profile\" )  --Get action listener  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . data . name )   -- Jimmy \n   end  end  --Set action listener  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     if   evt . success   then \n       print ( 'saved' ) \n     end \n   end  end  --Setting data  local   function   setData () \n   --Set action \n   profile : set ({ name = \"Jimmy\" ,   age = 23 },   onSetResult )  end  --Getting data  local   function   getData () \n   --Get action \n   profile : get ( onResult )  end  --Set the data  setData ()  --OR, get the data  --getData()",
            "title": "Getting Started"
        },
        {
            "location": "/guide/#user-scope",
            "text": "A SkyTable, and its data, is scoped per user. When first initalizing the SkyTable client, you must provide a  username  (usually an email address), and a  password . These values are the responsibility of the developer to gather.   Note  The  username  and  password  are never stored on the SkyTable server. Instead a unique key is generated to identify the user.   The  username  and  password  are passed to the  init  API method:  local   skytable   =   require ( \"plugin.skytable\" )  skytable : init ({ \n   user   =   \"user@email.com\" , \n   password   =   \"<user-password>\" , \n   ...  })   This feature allows your user to run your application on different devices, and have their data \"synced\" between sessions.  See the  init  API method for more details.   Warning  If a  username  and/or  password  are changed, it is the responsibilty of the developer to  delete  the old data, and initalize the new tables using the updated  username  and  password .",
            "title": "User Scope"
        },
        {
            "location": "/guide/#base-scope",
            "text": "You can also assign a  base scope  to the SkyTable. This allows the saving of different data tables, per user, for multiple applications. A user can use the same  username  and  password  across all of your different applications.   Tip  Even if you don't think you will have the same users on different applications, it is a best practice to assign a  base scope  anyway. This future-proofs the SkyTable data.   The  base scope  is assigned in the  init  Api method:  local   skytable   =   require ( \"plugin.skytable\" )  skytable : init ({ \n   user   =   \"user@email.com\" , \n   password   =   \"<user-password>\" , \n   base   =   \"app1\" , \n   ...  })   Now when we want to access data from a different app (in this case \"app2\"), for the same user, we can do:  local   skytable   =   require ( \"plugin.skytable\" )  skytable : init ({ \n   user   =   \"user@email.com\" , \n   password   =   \"<user-password>\" , \n   base   =   \"app2\" ,   --different base scope \n   ...  })   See the  init  API method for more details.",
            "title": "Base Scope"
        },
        {
            "location": "/guide/#listeners",
            "text": "Because network requests are asynchronus actions, listeners must be supplied to all SkyTable API calls. The listener is where you will recieve the response from the SkyTable server.  There are two different event types returned from a SkyTable server. One shaped for the  set  call, and another for the remaining value based API calls;  get ,  delete , and  keys .  While you can use one listener for all the API calls, in general its easier to create two different listeners:  local   profile   =   skytable : open ( \"profile\" )  --Set  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ) \n   end  end  --Get, Delete, Keys  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     local   data   =   evt . data   --String, Number, Boolean, Table, or nil \n   end  end  --Set something  profile : set ( \"name\" ,   \"Marco\" ,   onSetResult )  --Get something  profile : get ( \"address.street\" ,   onResult )   The main difference between the events are the properties available.  Set event properties:     Name  Description  Type      isError  An error has occured.  Boolean    error  A descriptive error string.  String    success  A flag noting a successful  set  action.  Boolean    user  The user key of the calling client.  String      Note  If set, the  success  flag will almost always be  true . An unsuccessful call will usually be propagated to the  error  property.   Get, Delete, Keys event properties:     Name  Description  Type      isError  An error has occurred.  Boolean    error  A descriptive error string.  String    data  The returned data.  String, Number, Boolean, or Table    user  The user key of the calling client.  String      Note  The  data  property can potentially be  nil .   Best practices  While you can set up general listeners, it's best to assign a specific listener per action:  local   profile   =   skytable : open ( \"profile\" )  local   onSetName ( evt ) \n   if   evt . success   then \n     print ( 'name saved' ) \n   end  end  local   onSetColors ( evt ) \n   if   evt . success   then \n     print ( 'colors saved' ) \n   end  end  profile : set ( \"name\" ,   \"Dave\" ,   onSetName )  profile : set ( \"colors\" ,   { \"red\" , \"green\" , \"blue\" },   onSetColors )   This is the recommended approach for the other value based API calls;  get ,  delete , and  keys .  Another option is using  Tags .",
            "title": "Listeners"
        },
        {
            "location": "/guide/#data-paths",
            "text": "Data paths allow you to \"path\" to a value in the SkyTable, both to  set  and  get  the underlying value. Data paths can be used in all of the value based API calls. This includes  get ,  set ,  delete , and  keys .  When calling any of the value methods  without  a data path, a \"root\" path is implied. For example, let's assume the following data exists in a \"profile\" SkyTable:  { \n   name   =   \"Jim\" , \n   age   =   34 , \n   active   =   true , \n   address   =   { \n     street   =   \"123 Main St.\" , \n     city   =   \"San Diego\" , \n     state   =   \"CA\" , \n     zip   =   92037 \n   }, \n   colors   =   { \"red\" ,   \"green\" ,   \"blue\" }  }   Pathing with Get  Then following call brings back the entire SkyTable (its \"root\" path):  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   local   data   =   evt . data   --the entire data table \n   print ( data . name )   -- Jim  end  profile : get ( onResult )   To gain access to an individual value in the SkyTable, we can supply a path:  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   local   data   =   evt . data   --holds \"name\" value \n   print ( data )   -- Jim  end  profile : get ( \"name\" ,   onResult )   To dive even deeper into the SkyTable, just path to the key, using a \"dot\" separator:  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   local   data   =   evt . data   --holds \"city\" value \n   print ( data )   -- San Diego  end  profile : get ( \"address.city\" ,   onResult )   If we wanted the entire \"address\" table:  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   local   data   =   evt . data   --entire address table \n   print ( address . state )   -- CA  end  profile : get ( \"address\" ,   onResult )   Or the \"colors\" table array:  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   local   data   =   evt . data   --entire colors array \n   for   i = 1 ,   # data . colors    do \n     print ( data . colors [ i ])   --red, green, blue \n   end  end  profile : get ( \"colors\" ,   onResult )   You can path as far as you need:  gear : get ( \"set1.arms.def\" ,   onResult )   Pathing with Set  When using paths with the  set  API call, the usage outlined above stays the same, with some implementation differences when setting a \"root\" path.  When first populating a SkyTable, you  must  pass it a data table to start with. This can be as little as one property, or a whole predefined table. To create the inital SkyTable we do like so:  local   profile   =   skytable : open ( \"profile\" )  local   function   onSetResult ( evt ) \n   if   evt . success   then \n     print ( 'saved' ) \n   end  end  local   data_tbl   =   { \n   name   =   \"Jim\"  }  profile : set ( data_tbl ,   onSetResult )   Once we have a data table saved to a SkyTable, we can set values on it at a later time by using a path:  local   profile   =   skytable : open ( \"profile\" )  local   function   onSetResult ( evt ) \n   if   evt . success   then \n     print ( 'saved' ) \n   end  end  profile : set ( \"name\" ,   \"Sally\" ,   onSetResult )   To add an \"address\" data table to our SkyTable, we can do:  local   profile   =   skytable : open ( \"profile\" )  local   address   =   { \n   street   =   \"123 Main St.\" , \n   city   =   \"San Diego\" , \n   state   =   \"CA\" , \n   zip   =   92037  }  local   function   onSetResult ( evt ) \n   if   evt . success   then \n     print ( 'saved' ) \n   end  end  profile : set ( \"address\" ,   address ,   onSetResult )   And to change a value in the \"address\" data table:  local   profile   =   skytable : open ( \"profile\" )  local   function   onSetResult ( evt ) \n   if   evt . success   then \n     print ( 'saved' ) \n   end  end  profile : set ( \"address.city\" ,   \"San Francisco\" ,   onSetResult )   Or adding an array table:  local   profile   =   skytable : open ( \"profile\" )  local   function   onSetResult ( evt ) \n   if   evt . success   then \n     print ( 'saved' ) \n   end  end  profile : set ( \"colors\" ,   { \"red\" , \"green\" , \"blue\" },   onSetResult )    Important  Once the \"root\" data table has been set for a SkyTable, you cannot overwrite it without specifying a flag.   To  overwrite  a \"root\" data table in a SkyTable, you must pass a special flag. This is not required when creating the initial data.  profile : set ( newDataTable ,   onSetResult ,   { flag = \"XX\" })   This helps prevent overwriting your \"root\" data table by accident. Flags can also be used with data paths, but the pathed value will be overwritten on any  set  call.  See  Flags  for more details.",
            "title": "Data Paths"
        },
        {
            "location": "/guide/#tags",
            "text": "When using a general listener (see  Listeners ), you can mark an API call with a  tag  to filter the response.  A  tag  is added to a call using the  options  parameter, which takes a table:  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   not   evt . isError   then \n     print ( evt . error ) \n   else \n     local   data   =   evt . data \n     if   evt . tag   ==   \"get-name\"   then \n       print ( data )   -- name string \n     elseif   evt . tag   ==   \"get-colors\"   then \n       print ( data [ 1 ])   -- colors table array \n     end \n   end  end  profile : get ( \"name\" ,   onResult ,   { tag = \"get-name\" })  profile : get ( \"colors\" ,   onResult ,   { tag = \"get-colors\" })   You can also use this method to create one main generalized response listener for both the  set  call, as well as  get ,  delete , and  keys :  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   not   evt . isError   then \n     print ( evt . error ) \n   else \n     if   evt . tag   ==   \"set-name\"   then \n       if   evt . success   then \n         print ( 'name saved' ) \n       end \n     elseif   evt . tag   ==   \"get-colors\"   then \n       print ( evt . data [ 1 ])   -- colors table array \n     end \n   end  end  profile : set ( \"name\" ,   \"Sam\" ,   onResult ,   { tag = \"set-name\" })  profile : get ( \"colors\" ,   onResult ,   { tag = \"get-colors\" })",
            "title": "Tags"
        },
        {
            "location": "/guide/#flags",
            "text": "When using the  set  API call, you can supply a  flag  to the  options  parameter, as a table.   Flag Types     Name  Description  Type      NX  Set the path value only if the path  does not  exist.  String    XX  Set the path value only if the path  does  exist.  String     local   profile   =   skytable : open ( \"profile\" )  local   function   onSetResult ( evt ) \n   if   evt . success   then \n     print ( 'saved' ) \n   end  end  --set the name only if the path exists.  profile : set ( \"name\" ,   onSetResult ,   { flag = \"XX\" })    Note  When calling a  set  without a flag, the value will be created if the path does not already exists, or replaced if it does.",
            "title": "Flags"
        },
        {
            "location": "/guide/#expiry",
            "text": "When using the  set  API call, you can also supply an  expiry  to \"expire\" the SkyTable at a specified time.    Warning  Once a SkyTable has been removed via an expiry, it is no longer accessible.   Expiry Properties     Name  Description  Type      seconds  The seconds until the SkyTable will be removed.  Number     local   profile   =   skytable : open ( \"profile\" )  local   onSetResult ( evt ) \n   if   evt . success   then \n     print ( 'saved' ,   'expiry:' ,   tostring ( evt . expiry )) \n   end  end  --remove the SkyTable in 5 minutes  profile : set ( data_tbl ,   onSetResult ,   { expiry = 300 })    Note  When a path is updated using the  set  API call, the expiry will be reset to its initial value. For example, if you set a value after 2 minutes on a 5 minute exipry, the expiry will be reset to 5 minutes.    Tip  To automatically clean out inactive SkyTables, set a high expiry value.",
            "title": "Expiry"
        },
        {
            "location": "/guide/#delete",
            "text": "The  delete  API call will remove a value at the given path.   Warning  This method should be used with caution.  When operating on the \"root\" path, the entire data table will be cleared , and the path will no longer exist. Unlike  set , with its  flag protection , a  delete  method will do its job as long as the path exists.   To delete a value at the specified path:  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   not   evt . isError   then \n     if   evt . data   >   0   then \n       print ( 'name deleted from profile' ) \n     end \n   end  end  profile : delete ( \"name\" ,   onResult )    Note  A  delete  event will contain a  data  property with a number noting the value paths removed. Most often this will be a one (1). In the case of a failed attempt, or invalid path, the  data  will contain the number zero (0).",
            "title": "Delete"
        },
        {
            "location": "/guide/#keys",
            "text": "The  keys  API call will return a tables keys in the SkyTable at the given path. Using our \"profile\" example, we can return all the keys at the \"root\" path like so:  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   not   evt . isError   then \n     local   keys   =   evt . data \n     --keys = {\"name\",\"age\",\"active\",\"address\",\"colors\"} \n   end  end  profile : keys ( onResult )   Using a path to a nested table:  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   not   evt . isError   then \n     local   keys   =   evt . data \n     --keys = {\"street\",\"city\",\"state\",\"zip\"} \n   end  end  profile : keys ( \"address\" ,   onResult )    Note  You can only access keys from data tables.",
            "title": "Keys"
        },
        {
            "location": "/guide/#syncing-data",
            "text": "With the use of data paths (see  Data Paths ), you can  get  and  set  values from different levels of the SkyTable.  As a best practice, and to keep your data synced between client and server, it is best to create or cache a local data table first, make changes to that table, and then push it to the server. This helps keep your data in sync easier.  local   profile_data   =   {}  local   profile   =   skytable : open ( \"profile\" )  local   function   onSetProfile ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     if   evt . success   then \n       print ( 'profile saved' ) \n     end \n   end  end  local   function   onGetProfile ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     --check if we have existing data \n     if   evt . data   ~=   nil   then \n       profile_data   =   evt . data \n     else \n       --there is no data table yet, create a default one \n       profile_data   =   { \n         name   =   \"Tammy\" , \n         age   =   45 \n       } \n       profile : set ( profile_data ,   onSetProfile ) \n     end \n   end  end  profile : get ( onGetProfile )   Once you have the local data table, use it to manage the data, and push it back to the server after any changes:  profile_data . active   =   true  profile_data . colors   =   { \"red\" , \"green\" , \"blue\" }  profile : set ( profile_data ,   onSetProfile ,   { flag = \"XX\" })    Note  When  replacing  a \"root\" value (as above), you must specify the \"XX\" flag. See  Flags .",
            "title": "Syncing Data"
        },
        {
            "location": "/api/",
            "text": "init\n\n\nInitialize the SkyTable module.\n\n\n:\ninit\n(\nconfig\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nconfig\n\n\nThe SkyTable configuration.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nConfig Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser\n\n\nThe SkyTable user.\n\n\nString\n\n\nY\n\n\n\n\n\n\npassword\n\n\nThe user password.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbase\n\n\nThe SkyTable base.\n\n\nString\n\n\nY\n\n\n\n\n\n\nhost\n\n\nThe SkyTable server host.\n\n\nString\n\n\nY\n\n\n\n\n\n\nkey\n\n\nThe SkyTable server key\n\n\nString\n\n\nY\n\n\n\n\n\n\ndebug\n\n\nOutput response data.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nskytable\n:\ninit\n({\n\n  \nuser\n \n=\n \n\"<user-email>\"\n,\n\n  \npassword\n \n=\n \n\"<user-password>\"\n,\n\n  \nbase\n \n=\n \n\"app1\"\n,\n\n  \nhost\n \n=\n \n\"http://<skytable-host>:7173\"\n,\n\n  \nkey\n \n=\n \n\"<server-key>\"\n,\n\n  \ndebug\n \n=\n \ntrue\n\n\n})\n\n\n\n\n\n\n\n\nImportant\n\n\nThe SkyTable server runs on port \n7173\n, make sure to include this on the \nhost\n property; \nhttp://<skytable-host>:7173\n.\n\n\n\n\n\n\nopen\n\n\nOpen a SkyTable for usage.\n\n\n:\nopen\n(\ntable_name\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntable_name\n\n\nThe name of the SkyTable to use.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\n\n\n\n\n\nset\n\n\nSet a value in a SkyTable.\n\n\n:set([data_path,] data, listener[, options])\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\ndata\n\n\nThe data to set the item to.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nflag\n\n\nNX\n or \nXX\n. (See \nFlags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nexpiry\n\n\nTable expiration in seconds. (See \nExpiry\n)\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile\n:\nset\n(\n\"age\"\n,\n \n23\n,\n \nonSetResult\n)\n\n\n\n\n\n\n\n\nTip\n\n\nSee \nListeners\n and \nData Paths\n in the \nClient Guide\n for detailed usage information.\n\n\n\n\n\n\nget\n\n\nGet a value from a SkyTable.\n\n\n:get([data_path,] listener[, options])\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile\n:\nget\n(\n\"age\"\n,\n \nonResult\n)\n\n\n\n\n\n\n\n\nTip\n\n\nSee \nListeners\n and \nData Paths\n in the \nClient Guide\n for detailed usage information.\n\n\n\n\n\n\ndelete\n\n\nDelete a value in a SkyTable.\n\n\n:delete([data_path,] listener[, options])\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile\n:\ndelete\n(\n\"color\"\n,\n \nonResult\n)\n\n\n\n\n\n\n\n\nTip\n\n\nSee \nDelete\n in the \nClient Guide\n for detailed usage information.\n\n\n\n\n\n\nkeys\n\n\nReturns the SkyTable keys.\n\n\n:keys([data_path,] listener[, options])\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile\n:\nkeys\n(\nonResult\n)",
            "title": "Client API"
        },
        {
            "location": "/api/#init",
            "text": "Initialize the SkyTable module.  : init ( config )   Parameters     Name  Description  Type  Required      config  The SkyTable configuration.  Table  Y     Config Properties     Name  Description  Type  Required      user  The SkyTable user.  String  Y    password  The user password.  String  Y    base  The SkyTable base.  String  Y    host  The SkyTable server host.  String  Y    key  The SkyTable server key  String  Y    debug  Output response data.  Boolean  N     Example  skytable : init ({ \n   user   =   \"<user-email>\" , \n   password   =   \"<user-password>\" , \n   base   =   \"app1\" , \n   host   =   \"http://<skytable-host>:7173\" , \n   key   =   \"<server-key>\" , \n   debug   =   true  })    Important  The SkyTable server runs on port  7173 , make sure to include this on the  host  property;  http://<skytable-host>:7173 .",
            "title": "init"
        },
        {
            "location": "/api/#open",
            "text": "Open a SkyTable for usage.  : open ( table_name )   Parameters     Name  Description  Type  Required      table_name  The name of the SkyTable to use.  String  Y     Example  local   profile   =   skytable : open ( \"profile\" )",
            "title": "open"
        },
        {
            "location": "/api/#set",
            "text": "Set a value in a SkyTable.  :set([data_path,] data, listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    data  The data to set the item to.  String  Y    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N    flag  NX  or  XX . (See  Flags )  String  N    expiry  Table expiration in seconds. (See  Expiry )  Number  N     Example  profile : set ( \"age\" ,   23 ,   onSetResult )    Tip  See  Listeners  and  Data Paths  in the  Client Guide  for detailed usage information.",
            "title": "set"
        },
        {
            "location": "/api/#get",
            "text": "Get a value from a SkyTable.  :get([data_path,] listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N     Example  profile : get ( \"age\" ,   onResult )    Tip  See  Listeners  and  Data Paths  in the  Client Guide  for detailed usage information.",
            "title": "get"
        },
        {
            "location": "/api/#delete",
            "text": "Delete a value in a SkyTable.  :delete([data_path,] listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N     Example  profile : delete ( \"color\" ,   onResult )    Tip  See  Delete  in the  Client Guide  for detailed usage information.",
            "title": "delete"
        },
        {
            "location": "/api/#keys",
            "text": "Returns the SkyTable keys.  :keys([data_path,] listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N     Example  profile : keys ( onResult )",
            "title": "keys"
        },
        {
            "location": "/example/",
            "text": "Demo\n\n\nYou can find the demo files here: \nhttps://github.com/develephant/coronium-skytable-demo\n\n\n\n\nScreencast\n\n\nLearn how to use the demo while viewing a screencast by \nclicking here\n.\n\n\n\n\n\n\nBasic Get\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \ntbl\n \n=\n \nevt\n.\ndata\n \n--data table\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\nonResult\n)\n\n\n\n\n\n\n\n\nGet with Path\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\ndata\n)\n \n--will be the \"name\" value\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"name\"\n,\n \nonResult\n)\n\n\n\n\n\n\n\n\nGet with Tags\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\ntag\n \n==\n \n\"get-name\"\n \nthen\n\n      \nprint\n(\nevt\n.\ndata\n)\n \n--will be the \"name\" value\n\n    \nelseif\n \nevt\n.\ntag\n \n==\n \n\"get-street\"\n \nthen\n\n      \nprint\n(\nevt\n.\ndata\n)\n \n--will be the \"street\" value\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"name\"\n,\n \nonResult\n,\n \n{\ntag\n=\n\"get-name\"\n})\n\n\nlocation\n:\nget\n(\n\"address.street\"\n,\n \nonResult\n,\n \n{\ntag\n=\n\"get-street\"\n})\n\n\n\n\n\n\n\n\nBasic Set\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"123 Main St.\"\n,\n\n    \ncity\n \n=\n \n\"San City\"\n,\n\n    \nstate\n \n=\n \n\"Anywhere\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n)\n\n\n\n\n\n\n\n\nSet with Path\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n)\n\n  \nend\n\n\nend\n\n\n\nlocation\n:\nset\n(\n\"address.state\"\n,\n \n\"Someplace\"\n,\n \nonSetResult\n)\n\n\n\n\n\n\n\n\nSet with Tags\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\ntag\n \n==\n \n\"set-location\"\n \nthen\n\n      \nprint\n(\n\"Set location\"\n,\n \nevt\n.\nsuccess\n)\n\n    \nelseif\n \nevt\n.\ntag\n \n==\n \n\"set-profile-name\"\n \nthen\n\n      \nprint\n(\n\"Set profile\"\n,\n \nevt\n.\nsuccess\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"123 Main St.\"\n,\n\n    \ncity\n \n=\n \n\"San City\"\n,\n\n    \nstate\n \n=\n \n\"Anywhere\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n,\n \n{\ntag\n=\n\"set-location\"\n})\n\n\nprofile\n:\nset\n(\n\"name\"\n,\n \n\"Steve\"\n,\n \nonSetResult\n,\n \n{\ntag\n=\n\"set-profile-name\"\n})\n\n\n\n\n\n\n\n\nSet with Flags\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"555 1st Ave.\"\n,\n\n    \ncity\n \n=\n \n\"Citopia\"\n,\n\n    \nstate\n \n=\n \n\"Bliss\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n,\n \n{\nflag\n \n=\n \n\"XX\"\n})\n\n\n\n\n\n\nSet with Expiry\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n,\n \nevt\n.\nexpiry\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"555 1st Ave.\"\n,\n\n    \ncity\n \n=\n \n\"Citopia\"\n,\n\n    \nstate\n \n=\n \n\"Bliss\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n,\n \n{\nexpiry\n \n=\n \n60\n})",
            "title": "Examples"
        },
        {
            "location": "/example/#demo",
            "text": "You can find the demo files here:  https://github.com/develephant/coronium-skytable-demo   Screencast  Learn how to use the demo while viewing a screencast by  clicking here .",
            "title": "Demo"
        },
        {
            "location": "/example/#basic-get",
            "text": "local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     local   tbl   =   evt . data   --data table \n   end  end  profile : get ( onResult )",
            "title": "Basic Get"
        },
        {
            "location": "/example/#get-with-path",
            "text": "local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . data )   --will be the \"name\" value \n   end  end  profile : get ( \"name\" ,   onResult )",
            "title": "Get with Path"
        },
        {
            "location": "/example/#get-with-tags",
            "text": "local   profile   =   skytable : open ( \"profile\" )  local   location   =   skytable : open ( \"location\" )  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     if   evt . tag   ==   \"get-name\"   then \n       print ( evt . data )   --will be the \"name\" value \n     elseif   evt . tag   ==   \"get-street\"   then \n       print ( evt . data )   --will be the \"street\" value \n     end \n   end  end  profile : get ( \"name\" ,   onResult ,   { tag = \"get-name\" })  location : get ( \"address.street\" ,   onResult ,   { tag = \"get-street\" })",
            "title": "Get with Tags"
        },
        {
            "location": "/example/#basic-set",
            "text": "local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ) \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"123 Main St.\" , \n     city   =   \"San City\" , \n     state   =   \"Anywhere\" \n   }  }  location : set ( locationData ,   onSetResult )",
            "title": "Basic Set"
        },
        {
            "location": "/example/#set-with-path",
            "text": "local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ) \n   end  end  location : set ( \"address.state\" ,   \"Someplace\" ,   onSetResult )",
            "title": "Set with Path"
        },
        {
            "location": "/example/#set-with-tags",
            "text": "local   location   =   skytable : open ( \"location\" )  local   profile   =   skytable : open ( \"profile\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     if   evt . tag   ==   \"set-location\"   then \n       print ( \"Set location\" ,   evt . success ) \n     elseif   evt . tag   ==   \"set-profile-name\"   then \n       print ( \"Set profile\" ,   evt . success ) \n     end \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"123 Main St.\" , \n     city   =   \"San City\" , \n     state   =   \"Anywhere\" \n   }  }  location : set ( locationData ,   onSetResult ,   { tag = \"set-location\" })  profile : set ( \"name\" ,   \"Steve\" ,   onSetResult ,   { tag = \"set-profile-name\" })",
            "title": "Set with Tags"
        },
        {
            "location": "/example/#set-with-flags",
            "text": "local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ) \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"555 1st Ave.\" , \n     city   =   \"Citopia\" , \n     state   =   \"Bliss\" \n   }  }  location : set ( locationData ,   onSetResult ,   { flag   =   \"XX\" })",
            "title": "Set with Flags"
        },
        {
            "location": "/example/#set-with-expiry",
            "text": "local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ,   evt . expiry ) \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"555 1st Ave.\" , \n     city   =   \"Citopia\" , \n     state   =   \"Bliss\" \n   }  }  location : set ( locationData ,   onSetResult ,   { expiry   =   60 })",
            "title": "Set with Expiry"
        },
        {
            "location": "/ssl/",
            "text": "Overview\n\n\n\n\nScreencast\n\n\nView the secure install instructions in a screencast format by \nclicking here\n.\n\n\n\n\nSecure your \nSkyTable\n server by utilizing the free SSL certificate service \nLet's Encrypt\n.\n\n\n\n\nWarning\n\n\nSetting up a secure SkyTable server is not a trivial process, so be sure to read through \nall\n of the steps before starting, and then follow them carefully.\n\n\n\n\nTo be issued a secure certificate, you must have a fully qualified domain name, and the proper DNS set up to serve the domain.\n\n\nA fully qualified domain name is basically a registered domain name. Where you decide to purchase a domain is up to you. \nGoDaddy\n is a popular choice. \n\n\nOnce you have your domain name, you will need to \"point\" it to your SkyTable server. Most domain registars provide a means of setting up DNS.\n\n\nYou will want to set up a 3rd level domain for your SkyTable server. This looks something like:\n\n\nskytable.<mydomain>.com\n\n\nAmazon\n\n\nWhen you first install SkyTable, make sure to add port 443 to your security group settings. You can then use the \nRoute 53\n service for your DNS. There are ample guides to assist you. \n\n\nOnce set up, proceed to the \nLet's Encrypt\n section below.\n\n\nDigitalOcean\n\n\nYou will need to point your domain to the DigitalOcean nameservers. The process for this varies by domain registar, but in all cases, you will need the DigitalOcean nameserver addresses, which are:\n\n\n\n\nns1.digitalocean.com\n\n\nns2.digitalocean.com\n\n\nns3.digitalocean.com\n\n\n\n\nInstructions for setting nameservers on GoDaddy can be found \nhere\n.\n\n\n\n\nImportant\n\n\nSpin up a SkyTable droplet as outlined in the \nDigitalOcean Installation\n section before continuing.\n\n\n\n\n1. In the DigitalOcean control panel, click the \nNetworking\n link at the top:\n\n\n\n\n2. Enter your new domain name, without any prefix:\n\n\n\n\n3. Click the \nAdd Domain\n button:\n\n\n\n\n4. On the next screen, do the following:\n\n\n\n\nEnter the hostname (only the domain prefix) of your SkyTable server. (1)\n\n\nFrom the \nWILL DIRECT TO\n field, select your SkyTable droplet. (2)\n\n\n\n\n\n\n5. Click the \nCreate Record\n button on the right:\n\n\n\n\nAt this point your DNS is set up, but generally needs to propagate. This can take anywhere from 5 minutes to a number of hours (though usually within 15 minutes). \n\n\nYou can check the progress using a site like \nwhatsmydns\n. Enter the full domain, including the prefix, to test.\n\n\nLet's Encrypt\n\n\n\n\nDanger\n\n\nDo not continue with this guide until you have an active domain name for your SkyTable server that you can reach through your web browser.\n\n\n\n\nTo move your SkyTable server over to HTTPS, perform the following steps:\n\n\n1. Log into your SkyTable droplet using the \nroot\n user:\n\n\nssh root@<your-skytable-domain>\n\n\n\n\n\nNote: The root user is \nubuntu\n if hosting on Amazon.\n\n\nIf you have not changed the password yet, the default is \ncoroniumadmin\n. You may be prompted for your password at various times during this process.\n\n\n2. Copy and paste the following on the command line to run the SkyTable SSL updater:\n\n\n\n\nWarning\n\n\nAt this point make sure you're ready to move over to HTTPS. The following process will permanently modify your configuration settings.\n\n\n\n\ncurl -LO https://s3.amazonaws.com/coronium-skytable/ssl.sh && sudo bash ./ssl.sh\n\n\nThe script will install the needed components, and update the configuration files. \n\n\nYou will then be propted for the \nhostname\n, a \nfully qualified domain name\n, and a valid \nemail\n. These items are required to request a certificate from Let's Encrypt.\n\n\nAs stated earlier, you should have created a 3rd level domain, for example: \nskytable.<domain>.com\n. Using the example, when entering the requested information, it might look like:\n\n\n\n\nNote\n\n\nMake sure to hit the \ndelete\n key a few times before entering values. If the update returns a confirmation instantly, then a space in the data is the most likely reason. If this happens, start again at step 2 above.\n\n\n\n\nEnter a hostname:\n \nskytable\n\n\nEnter a FQDN:\n \nskytable.<domain>.com\n\n\nEnter an email:\n \nyou@your-email.com\n\n\nBe sure to replace the information with your own answers.\n\n\n\n\nWarning\n\n\nMake sure to triple check your information. If not, then you might not be issued a certificate.\n\n\n\n\nAfter receiving your secure certificate, the script will exit and your SkyTable server will be accesible using \nhttps\n. \n\n\n\n\nTip\n\n\nIt's generally a good idea to reboot the server instance by entering \nsudo reboot -h\n on the command line. Wait a minute, and then check to make sure the server is running again.\n\n\n\n\nBe sure to update the \nhost\n in the client configuration (in the Corona project):\n\n\nskytable\n:\ninit\n({\n\n  \nuser\n \n=\n \n\"<user-email>\"\n,\n\n  \npassword\n \n=\n \n\"<user-password>\"\n,\n\n  \nbase\n \n=\n \n\"app1\"\n,\n\n  \nhost\n \n=\n \n\"https://<skytable-host>:7173\"\n,\n\n  \nkey\n \n=\n \n\"<server-key>\"\n\n\n})",
            "title": "HTTPS / SSL"
        },
        {
            "location": "/ssl/#overview",
            "text": "Screencast  View the secure install instructions in a screencast format by  clicking here .   Secure your  SkyTable  server by utilizing the free SSL certificate service  Let's Encrypt .   Warning  Setting up a secure SkyTable server is not a trivial process, so be sure to read through  all  of the steps before starting, and then follow them carefully.   To be issued a secure certificate, you must have a fully qualified domain name, and the proper DNS set up to serve the domain.  A fully qualified domain name is basically a registered domain name. Where you decide to purchase a domain is up to you.  GoDaddy  is a popular choice.   Once you have your domain name, you will need to \"point\" it to your SkyTable server. Most domain registars provide a means of setting up DNS.  You will want to set up a 3rd level domain for your SkyTable server. This looks something like:  skytable.<mydomain>.com",
            "title": "Overview"
        },
        {
            "location": "/ssl/#amazon",
            "text": "When you first install SkyTable, make sure to add port 443 to your security group settings. You can then use the  Route 53  service for your DNS. There are ample guides to assist you.   Once set up, proceed to the  Let's Encrypt  section below.",
            "title": "Amazon"
        },
        {
            "location": "/ssl/#digitalocean",
            "text": "You will need to point your domain to the DigitalOcean nameservers. The process for this varies by domain registar, but in all cases, you will need the DigitalOcean nameserver addresses, which are:   ns1.digitalocean.com  ns2.digitalocean.com  ns3.digitalocean.com   Instructions for setting nameservers on GoDaddy can be found  here .   Important  Spin up a SkyTable droplet as outlined in the  DigitalOcean Installation  section before continuing.   1. In the DigitalOcean control panel, click the  Networking  link at the top:   2. Enter your new domain name, without any prefix:   3. Click the  Add Domain  button:   4. On the next screen, do the following:   Enter the hostname (only the domain prefix) of your SkyTable server. (1)  From the  WILL DIRECT TO  field, select your SkyTable droplet. (2)    5. Click the  Create Record  button on the right:   At this point your DNS is set up, but generally needs to propagate. This can take anywhere from 5 minutes to a number of hours (though usually within 15 minutes).   You can check the progress using a site like  whatsmydns . Enter the full domain, including the prefix, to test.",
            "title": "DigitalOcean"
        },
        {
            "location": "/ssl/#lets-encrypt",
            "text": "Danger  Do not continue with this guide until you have an active domain name for your SkyTable server that you can reach through your web browser.   To move your SkyTable server over to HTTPS, perform the following steps:  1. Log into your SkyTable droplet using the  root  user:  ssh root@<your-skytable-domain>  Note: The root user is  ubuntu  if hosting on Amazon.  If you have not changed the password yet, the default is  coroniumadmin . You may be prompted for your password at various times during this process.  2. Copy and paste the following on the command line to run the SkyTable SSL updater:   Warning  At this point make sure you're ready to move over to HTTPS. The following process will permanently modify your configuration settings.   curl -LO https://s3.amazonaws.com/coronium-skytable/ssl.sh && sudo bash ./ssl.sh  The script will install the needed components, and update the configuration files.   You will then be propted for the  hostname , a  fully qualified domain name , and a valid  email . These items are required to request a certificate from Let's Encrypt.  As stated earlier, you should have created a 3rd level domain, for example:  skytable.<domain>.com . Using the example, when entering the requested information, it might look like:   Note  Make sure to hit the  delete  key a few times before entering values. If the update returns a confirmation instantly, then a space in the data is the most likely reason. If this happens, start again at step 2 above.   Enter a hostname:   skytable  Enter a FQDN:   skytable.<domain>.com  Enter an email:   you@your-email.com  Be sure to replace the information with your own answers.   Warning  Make sure to triple check your information. If not, then you might not be issued a certificate.   After receiving your secure certificate, the script will exit and your SkyTable server will be accesible using  https .    Tip  It's generally a good idea to reboot the server instance by entering  sudo reboot -h  on the command line. Wait a minute, and then check to make sure the server is running again.   Be sure to update the  host  in the client configuration (in the Corona project):  skytable : init ({ \n   user   =   \"<user-email>\" , \n   password   =   \"<user-password>\" , \n   base   =   \"app1\" , \n   host   =   \"https://<skytable-host>:7173\" , \n   key   =   \"<server-key>\"  })",
            "title": "Let's Encrypt"
        },
        {
            "location": "/about/",
            "text": "Code and documentation \u00a92017 C. Byerley (\ndevelephant\n).",
            "title": "About"
        }
    ]
}