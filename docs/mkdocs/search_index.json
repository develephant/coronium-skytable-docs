{
    "docs": [
        {
            "location": "/",
            "text": "Coronium SkyTable\n\n\nA performant user scoped data table store and client for use with \nCorona\n.\n\n\n\n\nGet The Client\n\n\nFirst point your browser to the \nCoronium SkyTable Client GitHub repo\n.\n\n\nNext, click the \"Clone or Download\" button and select \"Download ZIP\" to a location on your computer.\n\n\n\n\nExpand the \ncoronium-skytable-master.zip\n file and navigate to \ncoronium-skytable-master/skytable\n directory.\n\n\n\n\nCopy the \nskytable\n directory to the root of your Corona SDK project.\n\n\n\n\nAdding The Client\n\n\nOnce you have the \nskytable\n directory in your project, do the following to incorporate it.\n\n\nOpen your \nmain.lua\n file and add the following:\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n'skytable.client'\n)\n\n\n\n\n\n\n\n\nTip\n\n\nSee \nClient API\n to start using the API.",
            "title": "Introduction"
        },
        {
            "location": "/#coronium-skytable",
            "text": "A performant user scoped data table store and client for use with  Corona .",
            "title": "Coronium SkyTable"
        },
        {
            "location": "/#get-the-client",
            "text": "First point your browser to the  Coronium SkyTable Client GitHub repo .  Next, click the \"Clone or Download\" button and select \"Download ZIP\" to a location on your computer.   Expand the  coronium-skytable-master.zip  file and navigate to  coronium-skytable-master/skytable  directory.   Copy the  skytable  directory to the root of your Corona SDK project.",
            "title": "Get The Client"
        },
        {
            "location": "/#adding-the-client",
            "text": "Once you have the  skytable  directory in your project, do the following to incorporate it.  Open your  main.lua  file and add the following:  local   skytable   =   require ( 'skytable.client' )    Tip  See  Client API  to start using the API.",
            "title": "Adding The Client"
        },
        {
            "location": "/api/",
            "text": "SkyTable\n\n\ninit\n\n\nInitialize the SkyTable module.\n\n\n:\ninit\n(\nconfig\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nconfig\n\n\nThe SkyTable configuration.\n\n\nTable\n\n\nY\n\n\n\n\n\n\n\n\nConfig Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser\n\n\nThe SkyTable user.\n\n\nString\n\n\nY\n\n\n\n\n\n\npassword\n\n\nThe user password.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbase\n\n\nThe SkyTable base.\n\n\nString\n\n\nY\n\n\n\n\n\n\nhost\n\n\nThe SkyTable server host.\n\n\nString\n\n\nY\n\n\n\n\n\n\nkey\n\n\nThe SkyTable server key\n\n\nString\n\n\nY\n\n\n\n\n\n\ndebug\n\n\nOutput response data.\n\n\nBoolean\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nskytable\n:\ninit\n({\n\n  \nuser\n \n=\n \n\"<user-email>\"\n,\n\n  \npassword\n \n=\n \n\"<user-password>\"\n,\n\n  \nbase\n \n=\n \n\"app1\"\n,\n\n  \nhost\n \n=\n \n\"http://skytable-host\"\n,\n\n  \nkey\n \n=\n \n\"<server-key>\"\n,\n\n  \ndebug\n \n=\n \ntrue\n\n\n})\n\n\n\n\n\n\n\n\nopen\n\n\nOpen a SkyTable for usage.\n\n\n:\nopen\n(\ntable_name\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntable_name\n\n\nThe name of the SkyTable to use.\n\n\nString\n\n\nY\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\n\n\n\n\n\nset\n\n\nSet a value in a SkyTable.\n\n\n:set([data_path,] data, listener[, options])\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\ndata\n\n\nThe data to set the item to.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nflag\n\n\nNX\n or \nXX\n. (See \nFlags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nexpiry\n\n\nTable expiration in seconds. (See \nExpiry\n)\n\n\nNumber\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile\n:\nset\n(\n\"age\"\n,\n \n23\n,\n \nonSetResult\n)\n\n\n\n\n\n\n\n\nTip\n\n\nSee \nSet\n in the \nClient Guide\n for detailed usage information.\n\n\n\n\n\n\nget\n\n\nGet a value from a SkyTable.\n\n\n:get([data_path,] listener[, options])\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile\n:\nget\n(\n\"age\"\n,\n \nonResult\n)\n\n\n\n\n\n\n\n\nTip\n\n\nSee \nGet\n in the \nClient Guide\n for detailed usage information.\n\n\n\n\n\n\ndelete\n\n\nDelete a value in a SkyTable.\n\n\n:delete([data_path,] listener[, options])\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile\n:\ndelete\n(\n\"color\"\n,\n \nonResult\n)\n\n\n\n\n\n\n\n\nTip\n\n\nSee \nDelete\n in the \nClient Guide\n for detailed usage information.\n\n\n\n\n\n\nkeys\n\n\nReturns the SkyTable keys.\n\n\n:keys([data_path,] listener[, options])\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ndata_path\n\n\nPath to the item data. (See \nData Paths\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\nlistener\n\n\nA listener function. (See \nListeners\n)\n\n\nFunction\n\n\nY\n\n\n\n\n\n\noptions\n\n\nAdditional options.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nOptions Properties\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA descriptive name for the event. (See \nTags\n)\n\n\nString\n\n\nN\n\n\n\n\n\n\n\n\nExample\n\n\nprofile\n:\nkeys\n(\nonResult\n)",
            "title": "Client API"
        },
        {
            "location": "/api/#skytable",
            "text": "",
            "title": "SkyTable"
        },
        {
            "location": "/api/#init",
            "text": "Initialize the SkyTable module.  : init ( config )   Parameters     Name  Description  Type  Required      config  The SkyTable configuration.  Table  Y     Config Properties     Name  Description  Type  Required      user  The SkyTable user.  String  Y    password  The user password.  String  Y    base  The SkyTable base.  String  Y    host  The SkyTable server host.  String  Y    key  The SkyTable server key  String  Y    debug  Output response data.  Boolean  N     Example  skytable : init ({ \n   user   =   \"<user-email>\" , \n   password   =   \"<user-password>\" , \n   base   =   \"app1\" , \n   host   =   \"http://skytable-host\" , \n   key   =   \"<server-key>\" , \n   debug   =   true  })",
            "title": "init"
        },
        {
            "location": "/api/#open",
            "text": "Open a SkyTable for usage.  : open ( table_name )   Parameters     Name  Description  Type  Required      table_name  The name of the SkyTable to use.  String  Y     Example  local   profile   =   skytable : open ( \"profile\" )",
            "title": "open"
        },
        {
            "location": "/api/#set",
            "text": "Set a value in a SkyTable.  :set([data_path,] data, listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    data  The data to set the item to.  String  Y    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N    flag  NX  or  XX . (See  Flags )  String  N    expiry  Table expiration in seconds. (See  Expiry )  Number  N     Example  profile : set ( \"age\" ,   23 ,   onSetResult )    Tip  See  Set  in the  Client Guide  for detailed usage information.",
            "title": "set"
        },
        {
            "location": "/api/#get",
            "text": "Get a value from a SkyTable.  :get([data_path,] listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N     Example  profile : get ( \"age\" ,   onResult )    Tip  See  Get  in the  Client Guide  for detailed usage information.",
            "title": "get"
        },
        {
            "location": "/api/#delete",
            "text": "Delete a value in a SkyTable.  :delete([data_path,] listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N     Example  profile : delete ( \"color\" ,   onResult )    Tip  See  Delete  in the  Client Guide  for detailed usage information.",
            "title": "delete"
        },
        {
            "location": "/api/#keys",
            "text": "Returns the SkyTable keys.  :keys([data_path,] listener[, options])  Parameters     Name  Description  Type  Required      data_path  Path to the item data. (See  Data Paths )  String  N    listener  A listener function. (See  Listeners )  Function  Y    options  Additional options.  Table  N     Options Properties     Name  Description  Type  Required      tag  A descriptive name for the event. (See  Tags )  String  N     Example  profile : keys ( onResult )",
            "title": "keys"
        },
        {
            "location": "/guide/",
            "text": "Overview\n\n\n\n\nData Paths\n\n\n\n\nListeners\n\n\n\n\nTags\n\n\n\n\nFlags\n\n\n\n\nExpiry\n\n\n\n\nSet\n\n\n\n\nGet\n\n\n\n\nDelete",
            "title": "Client Guide"
        },
        {
            "location": "/guide/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/guide/#data-paths",
            "text": "",
            "title": "Data Paths"
        },
        {
            "location": "/guide/#listeners",
            "text": "",
            "title": "Listeners"
        },
        {
            "location": "/guide/#tags",
            "text": "",
            "title": "Tags"
        },
        {
            "location": "/guide/#flags",
            "text": "",
            "title": "Flags"
        },
        {
            "location": "/guide/#expiry",
            "text": "",
            "title": "Expiry"
        },
        {
            "location": "/guide/#set",
            "text": "",
            "title": "Set"
        },
        {
            "location": "/guide/#get",
            "text": "",
            "title": "Get"
        },
        {
            "location": "/guide/#delete",
            "text": "",
            "title": "Delete"
        },
        {
            "location": "/example/",
            "text": "Basic Get\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"skytable.client\"\n)\n\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nlocal\n \ntbl\n \n=\n \nevt\n.\ndata\n \n--data table\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\nonResult\n)\n\n\n\n\n\n\n\n\nGet with Path\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"skytable.client\"\n)\n\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\ndata\n.\nname\n)\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"name\"\n,\n \nonResult\n)\n\n\n\n\n\n\n\n\nGet with Tags\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"skytable.client\"\n)\n\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\ntag\n \n==\n \n\"get-name\"\n \nthen\n\n      \nprint\n(\nevt\n.\ndata\n.\nname\n)\n\n    \nelseif\n \nevt\n.\ntag\n \n==\n \n\"get-street\"\n \nthen\n\n      \nprint\n(\nevt\n.\ndata\n.\nstreet\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nprofile\n:\nget\n(\n\"name\"\n,\n \nonResult\n,\n \n{\ntag\n=\n\"get-name\"\n})\n\n\nlocation\n:\nget\n(\n\"address.street\"\n,\n \nonResult\n,\n \n{\ntag\n=\n\"get-street\"\n})\n\n\n\n\n\n\n\n\nBasic Set\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"skytable.client\"\n)\n\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"123 Main St.\"\n,\n\n    \ncity\n \n=\n \n\"San City\"\n,\n\n    \nstate\n \n=\n \n\"Anywhere\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n)\n\n\n\n\n\n\n\n\nSet with Path\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"skytable.client\"\n)\n\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n)\n\n  \nend\n\n\nend\n\n\n\nlocation\n:\nset\n(\n\"address.state\"\n,\n \n\"Someplace\"\n,\n \nonSetResult\n)\n\n\n\n\n\n\n\n\nSet with Tags\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"skytable.client\"\n)\n\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\nlocal\n \nprofile\n \n=\n \nskytable\n:\nopen\n(\n\"profile\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\ntag\n \n==\n \n\"set-location\"\n \nthen\n\n      \nprint\n(\n\"Set location\"\n,\n \nevt\n.\nsuccess\n)\n\n    \nelseif\n \nevt\n.\ntag\n \n==\n \n\"set-profile-name\"\n \nthen\n\n      \nprint\n(\n\"Set profile\"\n,\n \nevt\n.\nsuccess\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"123 Main St.\"\n,\n\n    \ncity\n \n=\n \n\"San City\"\n,\n\n    \nstate\n \n=\n \n\"Anywhere\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n,\n \n{\ntag\n=\n\"set-location\"\n})\n\n\nprofile\n:\nset\n(\n\"name\"\n,\n \n\"Steve\"\n,\n \nonSetResult\n,\n \n{\ntag\n=\n\"set-profile-name\"\n})\n\n\n\n\n\n\n\n\nSet with Options\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"skytable.client\"\n)\n\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"555 1st Ave.\"\n,\n\n    \ncity\n \n=\n \n\"Citopia\"\n,\n\n    \nstate\n \n=\n \n\"Bliss\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n,\n \n{\nflag\n \n=\n \n\"XX\"\n})\n\n\n\n\n\n\nSet with Expiry\n\n\nlocal\n \nskytable\n \n=\n \nrequire\n(\n\"skytable.client\"\n)\n\n\n\nlocal\n \nlocation\n \n=\n \nskytable\n:\nopen\n(\n\"location\"\n)\n\n\n\nlocal\n \nfunction\n \nonSetResult\n(\nevt\n)\n\n  \nif\n \nevt\n.\nisError\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n    \nprint\n(\nevt\n.\nsuccess\n,\n \nevt\n.\nexpiry\n)\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nlocationData\n \n=\n \n\n{\n\n  \naddress\n \n=\n \n  \n{\n\n    \nstreet\n \n=\n \n\"555 1st Ave.\"\n,\n\n    \ncity\n \n=\n \n\"Citopia\"\n,\n\n    \nstate\n \n=\n \n\"Bliss\"\n\n  \n}\n\n\n}\n\n\n\nlocation\n:\nset\n(\nlocationData\n,\n \nonSetResult\n,\n \n{\nexpiry\n \n=\n \n60\n})",
            "title": "Examples"
        },
        {
            "location": "/example/#basic-get",
            "text": "local   skytable   =   require ( \"skytable.client\" )  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     local   tbl   =   evt . data   --data table \n   end  end  profile : get ( onResult )",
            "title": "Basic Get"
        },
        {
            "location": "/example/#get-with-path",
            "text": "local   skytable   =   require ( \"skytable.client\" )  local   profile   =   skytable : open ( \"profile\" )  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . data . name ) \n   end  end  profile : get ( \"name\" ,   onResult )",
            "title": "Get with Path"
        },
        {
            "location": "/example/#get-with-tags",
            "text": "local   skytable   =   require ( \"skytable.client\" )  local   profile   =   skytable : open ( \"profile\" )  local   location   =   skytable : open ( \"location\" )  local   function   onResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     if   evt . tag   ==   \"get-name\"   then \n       print ( evt . data . name ) \n     elseif   evt . tag   ==   \"get-street\"   then \n       print ( evt . data . street ) \n     end \n   end  end  profile : get ( \"name\" ,   onResult ,   { tag = \"get-name\" })  location : get ( \"address.street\" ,   onResult ,   { tag = \"get-street\" })",
            "title": "Get with Tags"
        },
        {
            "location": "/example/#basic-set",
            "text": "local   skytable   =   require ( \"skytable.client\" )  local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ) \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"123 Main St.\" , \n     city   =   \"San City\" , \n     state   =   \"Anywhere\" \n   }  }  location : set ( locationData ,   onSetResult )",
            "title": "Basic Set"
        },
        {
            "location": "/example/#set-with-path",
            "text": "local   skytable   =   require ( \"skytable.client\" )  local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ) \n   end  end  location : set ( \"address.state\" ,   \"Someplace\" ,   onSetResult )",
            "title": "Set with Path"
        },
        {
            "location": "/example/#set-with-tags",
            "text": "local   skytable   =   require ( \"skytable.client\" )  local   location   =   skytable : open ( \"location\" )  local   profile   =   skytable : open ( \"profile\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     if   evt . tag   ==   \"set-location\"   then \n       print ( \"Set location\" ,   evt . success ) \n     elseif   evt . tag   ==   \"set-profile-name\"   then \n       print ( \"Set profile\" ,   evt . success ) \n     end \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"123 Main St.\" , \n     city   =   \"San City\" , \n     state   =   \"Anywhere\" \n   }  }  location : set ( locationData ,   onSetResult ,   { tag = \"set-location\" })  profile : set ( \"name\" ,   \"Steve\" ,   onSetResult ,   { tag = \"set-profile-name\" })",
            "title": "Set with Tags"
        },
        {
            "location": "/example/#set-with-options",
            "text": "local   skytable   =   require ( \"skytable.client\" )  local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ) \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"555 1st Ave.\" , \n     city   =   \"Citopia\" , \n     state   =   \"Bliss\" \n   }  }  location : set ( locationData ,   onSetResult ,   { flag   =   \"XX\" })",
            "title": "Set with Options"
        },
        {
            "location": "/example/#set-with-expiry",
            "text": "local   skytable   =   require ( \"skytable.client\" )  local   location   =   skytable : open ( \"location\" )  local   function   onSetResult ( evt ) \n   if   evt . isError   then \n     print ( evt . error ) \n   else \n     print ( evt . success ,   evt . expiry ) \n   end  end  local   locationData   =   { \n   address   =  \n   { \n     street   =   \"555 1st Ave.\" , \n     city   =   \"Citopia\" , \n     state   =   \"Bliss\" \n   }  }  location : set ( locationData ,   onSetResult ,   { expiry   =   60 })",
            "title": "Set with Expiry"
        },
        {
            "location": "/about/",
            "text": "Code and documentation \u00a92017 C. Byerley (\ndevelephant\n).\n\n\nLicensed under the \nApache 2.0\n license.",
            "title": "About"
        }
    ]
}